/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package kwanza.tukule.management.system;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.print.Printer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author Mariwa
 */
public class CustomersPanel extends javax.swing.JPanel {
Connection con = null;
ResultSet rs = null;
PreparedStatement pst = null;
PreparedStatement pst2 = null;
PreparedStatement pst3 = null;
public String user;
public String role;
public String CustomerId;
public String CustomerName;
public String CustomerNumber;
public String CustomerDeliverer;
public String CustomerLocation;
public String CustomerStatus;
Connection connect = databaseConnection.connection();
public Icon icon = new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/images/kwanza tukule icon.png"));
    /** Creates new form CustomersPanel */
    public CustomersPanel() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerSearchContact = new javax.swing.JTextField();
        blacklistedSaveChangsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        blackListedTable = new javax.swing.JTable();
        showAllCustomersButton = new javax.swing.JButton();
        customersPageTitle = new javax.swing.JLabel();
        customerBlacklist = new javax.swing.JButton();
        customerSearchDeliverer = new javax.swing.JTextField();
        customerDelete = new javax.swing.JButton();
        customerSearchName = new javax.swing.JTextField();
        blacklistedRestore = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        blacklistedDelete = new javax.swing.JButton();
        customersSaveChangesButton = new javax.swing.JButton();

        customerSearchContact.setBackground(new java.awt.Color(232, 228, 228));
        customerSearchContact.setForeground(new java.awt.Color(102, 102, 102));
        customerSearchContact.setText("Search by contact...");
        customerSearchContact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSearchContactFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerSearchContactFocusLost(evt);
            }
        });
        customerSearchContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchContactActionPerformed(evt);
            }
        });

        blacklistedSaveChangsButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedSaveChangsButton.setText("Save");
        blacklistedSaveChangsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedSaveChangsButtonActionPerformed(evt);
            }
        });

        customersTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Deliverer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setRowHeight(20);
        jScrollPane3.setViewportView(customersTable);

        blackListedTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        blackListedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Amount Paid", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blackListedTable.setRowHeight(20);
        jScrollPane4.setViewportView(blackListedTable);

        showAllCustomersButton.setText("All Customers");
        showAllCustomersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCustomersButtonActionPerformed(evt);
            }
        });

        customersPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        customersPageTitle.setText("Customers");

        customerBlacklist.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customerBlacklist.setText("Blacklist");
        customerBlacklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerBlacklistActionPerformed(evt);
            }
        });

        customerSearchDeliverer.setBackground(new java.awt.Color(232, 228, 228));
        customerSearchDeliverer.setForeground(new java.awt.Color(102, 102, 102));
        customerSearchDeliverer.setText("Search by deliverer...");
        customerSearchDeliverer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSearchDelivererFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerSearchDelivererFocusLost(evt);
            }
        });
        customerSearchDeliverer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchDelivererActionPerformed(evt);
            }
        });

        customerDelete.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customerDelete.setText("Delete");
        customerDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDeleteActionPerformed(evt);
            }
        });

        customerSearchName.setBackground(new java.awt.Color(232, 228, 228));
        customerSearchName.setForeground(new java.awt.Color(102, 102, 102));
        customerSearchName.setText("Search by name...");
        customerSearchName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSearchNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerSearchNameFocusLost(evt);
            }
        });
        customerSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchNameActionPerformed(evt);
            }
        });

        blacklistedRestore.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedRestore.setText("Restore");
        blacklistedRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedRestoreActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel3.setText("Blacklisted");

        blacklistedDelete.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedDelete.setText("Delete");
        blacklistedDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedDeleteActionPerformed(evt);
            }
        });

        customersSaveChangesButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customersSaveChangesButton.setText("Save");
        customersSaveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersSaveChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(blacklistedSaveChangsButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(blacklistedRestore)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(blacklistedDelete))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(570, 570, 570)
                                                .addComponent(customersSaveChangesButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(customerBlacklist)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(customerDelete)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(customersPageTitle)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(customerSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(customerSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(customerSearchContact, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(showAllCustomersButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersPageTitle)
                    .addComponent(customerSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSearchContact, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAllCustomersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customersSaveChangesButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerBlacklist)
                        .addComponent(customerDelete)))
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blacklistedSaveChangsButton)
                    .addComponent(blacklistedRestore)
                    .addComponent(blacklistedDelete))
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customerSearchContactFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchContactFocusGained
        if(customerSearchContact.getText().equals("Search by contact...")){
            customerSearchContact.setText("");
        }
        customerSearchContact.setForeground(Color.BLACK);
        customerSearchContact.setBackground(Color.WHITE);
    }//GEN-LAST:event_customerSearchContactFocusGained

    private void customerSearchContactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchContactFocusLost
        if(customerSearchContact.getText().equals("")){
            customerSearchContact.setText("Search by contact...");
        }
        customerSearchContact.setForeground(new Color(102,102,102));
        customerSearchContact.setBackground(new Color(232,228,228));
    }//GEN-LAST:event_customerSearchContactFocusLost

    private void customerSearchContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchContactActionPerformed
        String searched = customerSearchContact.getText();
        String query2 = "select * from customers where Number LIKE '%"+searched+"%'";
        try {
            pst = connect.prepareStatement(query2);
            rs=pst.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
            tm.setRowCount(0);
            while(rs.next()){
                Object o[]={rs.getInt("id"),
                    rs.getString("Name"),
                    rs.getString("Number"),
                    rs.getString("Location"),
                    rs.getString("Deliverer"),
                    rs.getString("Status")};
                tm.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerSearchContactActionPerformed

    private void blacklistedSaveChangsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedSaveChangsButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)blackListedTable.getModel();
        int selectedRowIndex = blackListedTable.getSelectedRow();
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        double paid = Double.parseDouble(model.getValueAt(selectedRowIndex, 4).toString());
        double balance = Double.parseDouble(model.getValueAt(selectedRowIndex, 5).toString());
        double new_balance = balance+paid;
        String sql = "update orders set Balance = '"+new_balance+"' where Customer_id =" + cell;
        try{
            pst = connect.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Balance Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        blacklistQuery0();
    }//GEN-LAST:event_blacklistedSaveChangsButtonActionPerformed

    private void showAllCustomersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllCustomersButtonActionPerformed
        customersQuery0();
    }//GEN-LAST:event_showAllCustomersButtonActionPerformed

    private void customerBlacklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerBlacklistActionPerformed
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT EXISTS(SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.id='"+cell+"'  GROUP BY customers.id );";
        try{
            pst = connect.prepareStatement(sql2);
            rs=pst.executeQuery();
            int n = 0;
            if ( rs.next() ) {
                n = rs.getInt(1);
            }
            if ( n > 0 ) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "Blacklist Selected Customer?","Blacklist",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
                if(dialogResult == JOptionPane.YES_OPTION){
                    String sql = "update customers set Status = 'blacklisted' where id =" + cell;
                    try{
                        pst = connect.prepareStatement(sql);
                        pst.execute();
                        JOptionPane.showMessageDialog(this, "Customer Blacklisted.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
                    }
                }
                else{
                    customersQuery0();
                    blacklistQuery0();
                }
            }
            if(n == 0)
            {
                JOptionPane.showMessageDialog(this, "Selected Customer hasn't made any order.","Error",JOptionPane.INFORMATION_MESSAGE,icon);
                customersQuery0();
                blacklistQuery0();
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery0();
        blacklistQuery0();
    }//GEN-LAST:event_customerBlacklistActionPerformed

    private void customerSearchDelivererFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchDelivererFocusGained
        if(customerSearchDeliverer.getText().equals("Search by deliverer...")){
            customerSearchDeliverer.setText("");
        }
        customerSearchDeliverer.setForeground(Color.BLACK);
        customerSearchDeliverer.setBackground(Color.WHITE);
    }//GEN-LAST:event_customerSearchDelivererFocusGained

    private void customerSearchDelivererFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchDelivererFocusLost
        if(customerSearchDeliverer.getText().equals("")){
            customerSearchDeliverer.setText("Search by deliverer...");
        }
        customerSearchDeliverer.setForeground(new Color(102,102,102));
        customerSearchDeliverer.setBackground(new Color(232,228,228));
    }//GEN-LAST:event_customerSearchDelivererFocusLost

    private void customerSearchDelivererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchDelivererActionPerformed
        String searched = customerSearchDeliverer.getText();
        String query2 = "select * from customers where Deliverer LIKE '%"+searched+"%'";
        try {
            pst = connect.prepareStatement(query2);
            rs=pst.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
            tm.setRowCount(0);
            while(rs.next()){
                Object o[]={rs.getInt("id"),
                    rs.getString("Name"),
                    rs.getString("Number"),
                    rs.getString("Location"),
                    rs.getString("Deliverer"),
                    rs.getString("Status")};
                tm.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerSearchDelivererActionPerformed

    private void customerDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerDeleteActionPerformed
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from customers where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete Selected Customer?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
                pst = connect.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(this, "Customer Deleted.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
            }
            else{
                customersQuery0();
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.ERROR_MESSAGE,icon);
        }
        customersQuery0();
    }//GEN-LAST:event_customerDeleteActionPerformed

    private void customerSearchNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchNameFocusGained
        if(customerSearchName.getText().equals("Search by name...")){
            customerSearchName.setText("");
        }
        customerSearchName.setForeground(Color.BLACK);
        customerSearchName.setBackground(Color.WHITE);
    }//GEN-LAST:event_customerSearchNameFocusGained

    private void customerSearchNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSearchNameFocusLost
        if(customerSearchName.getText().equals("")){
            customerSearchName.setText("Search by name...");
        }
        customerSearchName.setForeground(new Color(102,102,102));
        customerSearchName.setBackground(new Color(232,228,228));
    }//GEN-LAST:event_customerSearchNameFocusLost

    private void customerSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchNameActionPerformed
        String searched = customerSearchName.getText();
        String query2 = "select * from customers where Name LIKE '%"+searched+"%'";
        try {
            pst = connect.prepareStatement(query2);
            rs=pst.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
            tm.setRowCount(0);
            while(rs.next()){
                Object o[]={rs.getInt("id"),
                    rs.getString("Name"),
                    rs.getString("Number"),
                    rs.getString("Location"),
                    rs.getString("Deliverer"),
                    rs.getString("Status")};
                tm.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerSearchNameActionPerformed

    private void blacklistedRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedRestoreActionPerformed
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  and customers.id='"+cell+"' GROUP BY customers.id ); ";
        try{
            pst = connect.prepareStatement(sql2);
            rs=pst.executeQuery();
            while(rs.next()){
                double balance = rs.getDouble("orders.Balance");
                if(balance == 0){
                    String sql = "update customers set Status = 'clean' where id =" + cell;
                    try{
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
                        if(dialogResult == JOptionPane.YES_OPTION){
                            pst = connect.prepareStatement(sql);
                            pst.execute();
                            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
                        }
                        else{
                            customersQuery0();
                            blacklistQuery0();
                        }

                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
                    }
                }
                if(balance > 0){
                    String sql = "update customers set Status = 'credit' where id =" + cell;
                    try{
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
                        if(dialogResult == JOptionPane.YES_OPTION){
                            pst = connect.prepareStatement(sql);
                            pst.execute();
                            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
                        }
                        else{
                            customersQuery0();
                            blacklistQuery0();
                        }

                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
                    }
                }
                if(balance < 0 && balance >= -100){
                    String sql = "update customers set Status = 'fined' where id =" + cell;
                    try{
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
                        if(dialogResult == JOptionPane.YES_OPTION){
                            pst = connect.prepareStatement(sql);
                            pst.execute();
                            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
                        }
                        else{
                            customersQuery0();
                            blacklistQuery0();
                        }

                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
                    }
                }
                if(balance < -100){
                    String sql = "update customers set Status = 'no delivery' where id =" + cell;
                    try{
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
                        if(dialogResult == JOptionPane.YES_OPTION){
                            pst = connect.prepareStatement(sql);
                            pst.execute();
                            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
                        }
                        else{
                            customersQuery0();
                            blacklistQuery0();
                        }

                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

        customersQuery0();
        blacklistQuery0();
    }//GEN-LAST:event_blacklistedRestoreActionPerformed

    private void blacklistedDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedDeleteActionPerformed
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from customers where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete Selected Customer?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
                pst = connect.prepareStatement(sql);
                pst.execute();
            }
            else{
                blacklistQuery0();
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.ERROR_MESSAGE,icon);
        }
        blacklistQuery0();
    }//GEN-LAST:event_blacklistedDeleteActionPerformed

    private void customersSaveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersSaveChangesButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        int selectedRowIndex = customersTable.getSelectedRow();
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String name = model.getValueAt(selectedRowIndex, 1).toString();
        String number = model.getValueAt(selectedRowIndex, 2).toString();
        String location = model.getValueAt(selectedRowIndex, 3).toString();
        String deliverer = model.getValueAt(selectedRowIndex, 4).toString();
        String sql = "update customers set Name = '"+name+"', Number='"+number+"',Location='"+location+"',Deliverer='"+deliverer+"' where id =" + cell;
        try{
            pst = connect.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery0();

    }//GEN-LAST:event_customersSaveChangesButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable blackListedTable;
    private javax.swing.JButton blacklistedDelete;
    private javax.swing.JButton blacklistedRestore;
    private javax.swing.JButton blacklistedSaveChangsButton;
    private javax.swing.JButton customerBlacklist;
    private javax.swing.JButton customerDelete;
    private javax.swing.JTextField customerSearchContact;
    private javax.swing.JTextField customerSearchDeliverer;
    private javax.swing.JTextField customerSearchName;
    private javax.swing.JLabel customersPageTitle;
    private javax.swing.JButton customersSaveChangesButton;
    private javax.swing.JTable customersTable;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton showAllCustomersButton;
    // End of variables declaration//GEN-END:variables

    public void customersQuery0() {
        String query2 = "select * from customers where Status='clean' or Status='fined' or Status='credit' or Status='no delivery'";
        try {
                pst = connect.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
public void blacklistQuery0() {
         String query2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.id IN (SELECT MAX(orders.id) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  GROUP BY customers.id );";
        try {
                pst = connect.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)blackListedTable.getModel();
                double paid = 0.0;
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("customers.id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("customers.Location"),
                                paid,
                                rs.getString("orders.Balance")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
}
