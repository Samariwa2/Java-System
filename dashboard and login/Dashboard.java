/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kwanza.tukule.management.system;

import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.print.Printer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableCellRenderer;


/**
 *
 * @author Mariwa
 */
public class Dashboard extends javax.swing.JFrame {
Connection con = null;
ResultSet rs = null;
PreparedStatement pst = null;
public String user;
public String role;
public String CustomerId;
public String CustomerName;
public String CustomerNumber;
public String CustomerDeliverer;
public String CustomerLocation;
public String CustomerStatus;
public Icon icon = new javax.swing.ImageIcon(getClass().getResource("kwanza tukule icon.png"));
          
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        this.setResizable(true);
        initComponents();
        sideBar.setSize(0,0);
        menuClose.setSize(0,0);
        customersPanel.setSize(0,0);
        customersPanel1.setSize(0,0);
        ordersPanel1.setSize(0,0);
        summaryPanel.setSize(0,0);
        addCustomerPanel.setSize(0,0);
        addStockBackButton.setSize(0,0);
        addCustomerBackButton.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        customersPanel2.setSize(0,0);
        addStockPanel.setSize(0,0);
        stockPanel1.setSize(0,0);
        addOrderPanel.setSize(0,0);
        ordersPanel.setSize(0,0);
        stockPanel.setSize(0,0);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        setIcon();
        ImageIcon img = new ImageIcon("kwanza/tukule/management/system/kwanza tukule icon.png");
        this.setIconImage(img.getImage());
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    public Dashboard(String username) {
        this.setResizable(true);
         this.user=username;
         initComponents();
         customersPanel.setSize(0,0);
        summaryPanel.setSize(0,0);
        addCustomerPanel.setSize(0,0);
        addStockBackButton.setSize(0,0);
        addCustomerBackButton.setSize(0,0);
        addStockPanel.setSize(0,0);
        addOrderPanel.setSize(0,0);
        stockPanel1.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        ordersPanel.setSize(0,0);
        customersPanel1.setSize(0,0);
        customersPanel2.setSize(0,0);
        ordersPanel1.setSize(0,0);
        stockPanel.setSize(0,0);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        setIcon();
        ImageIcon img = new ImageIcon("kwanza/tukule/management/system/kwanza tukule icon.png");
        this.setIconImage(img.getImage());
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        nullPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        menuOpen = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sideBar = new javax.swing.JPanel();
        customerSideBar = new javax.swing.JLabel();
        menuClose = new javax.swing.JLabel();
        stockSideBar = new javax.swing.JLabel();
        orderSideBar = new javax.swing.JLabel();
        summarySideBar = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        customersPanel = new javax.swing.JPanel();
        customersPageTitle = new javax.swing.JLabel();
        customerSearchDeliverer = new javax.swing.JTextField();
        customerSearchName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        customersSaveChangesButton = new javax.swing.JButton();
        blacklistedSaveChangsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        blackListedTable = new javax.swing.JTable();
        showAllCustomersButton = new javax.swing.JButton();
        customerBlacklist = new javax.swing.JButton();
        customerDelete = new javax.swing.JButton();
        blacklistedRestore = new javax.swing.JButton();
        blacklistedDelete = new javax.swing.JButton();
        stockPanel = new javax.swing.JPanel();
        stockPageTitle = new javax.swing.JLabel();
        stockSearchName = new javax.swing.JTextField();
        addStockButton = new javax.swing.JButton();
        stockSaveChangesButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        showAllStockButton = new javax.swing.JButton();
        stockDeleteButton = new javax.swing.JButton();
        stockSearchCategory = new javax.swing.JTextField();
        ordersPanel = new javax.swing.JPanel();
        ordersPageTitle = new javax.swing.JLabel();
        ordersSearchName = new javax.swing.JTextField();
        addOrderButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer r, int rw ,int col )
            {
                Component c = super.prepareRenderer(r, rw, col);
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
                int rows=(Integer)ordersTable.getRowCount();
                for(int row = 0; row<rows; row++)
                {
                    DefaultTableModel model = (DefaultTableModel)ordersTable.getModel();
                    double debt = Double.parseDouble(ordersTable.getValueAt(rw, 9).toString());
                    if(debt == 0.0 && col==1 )
                    {
                        c.setBackground(Color.GREEN);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt > 0.0 && col==1)
                    {
                        c.setBackground(Color.ORANGE);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt < 0.0 && debt > -100.0 && col==1)
                    {
                        c.setBackground(Color.LIGHT_GRAY);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt < -100.0 && col==1)
                    {
                        c.setBackground(Color.RED);
                        c.setForeground(Color.BLACK);
                    }
                }
                return c;
            }
        }
        ;
        ordersSaveButton = new javax.swing.JButton();
        showAllOrdersButton = new javax.swing.JButton();
        ordersDeleteButton = new javax.swing.JButton();
        ordersSearchDeliverer = new javax.swing.JTextField();
        ordersSearchDate = new javax.swing.JTextField();
        summaryPanel = new javax.swing.JPanel();
        summaryPageTitle = new javax.swing.JLabel();
        totalSalesTodayLabel = new javax.swing.JLabel();
        revenueRealizedTodayLabel = new javax.swing.JLabel();
        totalPaidViaMpesaTodayLabel = new javax.swing.JLabel();
        totalPaidInCashTodayLabel = new javax.swing.JLabel();
        totalDebtPaidInMpesaLabel = new javax.swing.JLabel();
        totalDebtPaidInCashLabel = new javax.swing.JLabel();
        totalBankedTodayLabel = new javax.swing.JLabel();
        expensesTodayLabel = new javax.swing.JLabel();
        mpesaTodayLabel = new javax.swing.JLabel();
        salesTodayLabel = new javax.swing.JLabel();
        revenueTodayLabel = new javax.swing.JLabel();
        cashTodayLabel = new javax.swing.JLabel();
        bankedTodayLabel = new javax.swing.JLabel();
        debtMpesaLabel = new javax.swing.JLabel();
        debtCashLabel = new javax.swing.JLabel();
        expensesLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        addStockBackButton = new javax.swing.JButton();
        addCustomerBackButton = new javax.swing.JButton();
        addCustomerPanel = new javax.swing.JPanel();
        addCustomerPageTitle = new javax.swing.JLabel();
        addCustomerNameLabel = new javax.swing.JLabel();
        addCustomerNumberLabel = new javax.swing.JLabel();
        addCustomerDelivererLabel = new javax.swing.JLabel();
        addCustomerLocationLabel = new javax.swing.JLabel();
        addCustomerNameTextField = new javax.swing.JTextField();
        addCustomerNumberTextField = new javax.swing.JTextField();
        addCustomerLocationTextField = new javax.swing.JTextField();
        addCustomerDelivererTextField = new javax.swing.JTextField();
        addCustomerSaveButton = new javax.swing.JButton();
        addStockPanel = new javax.swing.JPanel();
        addStockPageTitle = new javax.swing.JLabel();
        addStockNameLabel = new javax.swing.JLabel();
        addStockQuantityLabel = new javax.swing.JLabel();
        addStockPriceLabel = new javax.swing.JLabel();
        addStockPriceTextField = new javax.swing.JTextField();
        addStockNameTextField = new javax.swing.JTextField();
        addStockQuantityTextField = new javax.swing.JTextField();
        addStockSaveButton = new javax.swing.JButton();
        addStockCategoryIdLabel = new javax.swing.JLabel();
        addStockCategoryIdTextField = new javax.swing.JTextField();
        customersPrintButton = new javax.swing.JButton();
        customersPanel1 = new javax.swing.JPanel();
        addCustomerButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        customersPageTitle1 = new javax.swing.JLabel();
        customerSearchDeliverer1 = new javax.swing.JTextField();
        customerSearchName1 = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        customersTable1 = new javax.swing.JTable();
        customersSaveChangesButton1 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        blackListedTable1 = new javax.swing.JTable();
        showAllCustomersButton1 = new javax.swing.JButton();
        avatarIcon = new javax.swing.JLabel();
        ordersPanel1 = new javax.swing.JPanel();
        ordersSearchName1 = new javax.swing.JTextField();
        addOrderButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ordersTable1 = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer r, int rw ,int col )
            {
                Component c = super.prepareRenderer(r, rw, col);
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
                int rows=(Integer)ordersTable.getRowCount();
                for(int row = 0; row<rows; row++)
                {
                    DefaultTableModel model = (DefaultTableModel)ordersTable.getModel();
                    double debt = Double.parseDouble(ordersTable.getValueAt(rw, 9).toString());
                    if(debt == 0.0 && col==1 )
                    {
                        c.setBackground(Color.GREEN);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt > 0.0 && col==1)
                    {
                        c.setBackground(Color.ORANGE);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt < 0.0 && debt > -100.0 && col==1)
                    {
                        c.setBackground(Color.LIGHT_GRAY);
                        c.setForeground(Color.BLACK);
                    }
                    else if(debt < -100.0 && col==1)
                    {
                        c.setBackground(Color.RED);
                        c.setForeground(Color.BLACK);
                    }
                }
                return c;
            }
        }
        ;
        ordersPageTitle1 = new javax.swing.JLabel();
        showAllOrdersButton1 = new javax.swing.JButton();
        ordersSearchDeliverer1 = new javax.swing.JTextField();
        ordersSearchDate1 = new javax.swing.JTextField();
        addOrderPanel = new javax.swing.JPanel();
        addOrderPageTitle = new javax.swing.JLabel();
        newOrderSearchName = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        newOrderTable = new javax.swing.JTable();
        orderDetailsTitle = new javax.swing.JLabel();
        newOrderSearchStock = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        newOrderDetailsTable = new javax.swing.JTable();
        addToCartButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        newOrderCartTable = new javax.swing.JTable();
        completeOrderButton = new javax.swing.JButton();
        deleteCartItemButton = new javax.swing.JButton();
        orderTotalLabel = new javax.swing.JLabel();
        totalReadText = new javax.swing.JTextField();
        addOrderBackButton = new javax.swing.JButton();
        stockPanel1 = new javax.swing.JPanel();
        stockPageTitle1 = new javax.swing.JLabel();
        stockSearchName1 = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        stockTable1 = new javax.swing.JTable();
        showAllStockButton1 = new javax.swing.JButton();
        stockSearchCategory1 = new javax.swing.JTextField();
        ordersPrintButton = new javax.swing.JButton();
        customersPanel2 = new javax.swing.JPanel();
        customersPageTitle2 = new javax.swing.JLabel();
        customerSearchDeliverer2 = new javax.swing.JTextField();
        customerSearchName2 = new javax.swing.JTextField();
        addCustomerButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        customersSaveChangesButton2 = new javax.swing.JButton();
        blacklistedSaveChangsButton1 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        customersTable2 = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        blackListedTable2 = new javax.swing.JTable();
        showAllCustomersButton2 = new javax.swing.JButton();
        customerBlacklist1 = new javax.swing.JButton();
        blacklistedRestore1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kwanza Tukule | Dashboard");

        setPreferredSize(new java.awt.Dimension(1650, 1080));
        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/kwanza tukule logo.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 0, 190, 80);
        jPanel1.add(userLabel);
        userLabel.setBounds(1688, 39, 0, 0);

        usernameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        usernameLabel.setText(user);
        jPanel1.add(usernameLabel);
        usernameLabel.setBounds(1000, 20, 200, 20);

        nullPanel.setLayout(null);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/kwanza home.png"))); // NOI18N
        nullPanel.add(jLabel7);
        jLabel7.setBounds(200, -140, 990, 900);

        jPanel1.add(nullPanel);
        nullPanel.setBounds(210, 60, 1190, 730);

        menuOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/menu.png"))); // NOI18N
        menuOpen.setText("jLabel2");
        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuOpenMousePressed(evt);
            }
        });
        jPanel1.add(menuOpen);
        menuOpen.setBounds(10, 90, 190, 60);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("Menu");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 110, 60, 22);

        sideBar.setBackground(new java.awt.Color(51, 204, 0));
        sideBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sideBar.setForeground(new java.awt.Color(255, 255, 255));

        customerSideBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        customerSideBar.setText("Customers");
        customerSideBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                customerSideBarMousePressed(evt);
            }
        });

        menuClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/menuClose.png"))); // NOI18N
        menuClose.setText("jLabel3");
        menuClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuCloseMousePressed(evt);
            }
        });

        stockSideBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        stockSideBar.setText("Stock");
        stockSideBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                stockSideBarMousePressed(evt);
            }
        });

        orderSideBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        orderSideBar.setText("Orders");
        orderSideBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                orderSideBarMousePressed(evt);
            }
        });

        summarySideBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        summarySideBar.setText("Summary");
        summarySideBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                summarySideBarMousePressed(evt);
            }
        });

        javax.swing.GroupLayout sideBarLayout = new javax.swing.GroupLayout(sideBar);
        sideBar.setLayout(sideBarLayout);
        sideBarLayout.setHorizontalGroup(
            sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideBarLayout.createSequentialGroup()
                .addGroup(sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sideBarLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(menuClose, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sideBarLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(summarySideBar)
                            .addComponent(orderSideBar)
                            .addComponent(stockSideBar)
                            .addComponent(customerSideBar))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sideBarLayout.setVerticalGroup(
            sideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideBarLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(menuClose, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(customerSideBar)
                .addGap(40, 40, 40)
                .addComponent(stockSideBar)
                .addGap(41, 41, 41)
                .addComponent(orderSideBar)
                .addGap(48, 48, 48)
                .addComponent(summarySideBar)
                .addContainerGap(347, Short.MAX_VALUE))
        );

        jPanel1.add(sideBar);
        sideBar.setBounds(0, 80, 0, 720);

        logoutButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        logoutButton.setText("LOGOUT");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        jPanel1.add(logoutButton);
        logoutButton.setBounds(1130, 20, 106, 29);

        customersPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        customersPageTitle.setText("Customers");

        customerSearchDeliverer.setText("Search by deliverer...");
        customerSearchDeliverer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchDelivererActionPerformed(evt);
            }
        });

        customerSearchName.setText("Search by name...");
        customerSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel3.setText("Blacklisted");

        customersSaveChangesButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customersSaveChangesButton.setText("Save");
        customersSaveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersSaveChangesButtonActionPerformed(evt);
            }
        });

        blacklistedSaveChangsButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedSaveChangsButton.setText("Save");
        blacklistedSaveChangsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedSaveChangsButtonActionPerformed(evt);
            }
        });

        customersTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Deliverer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setRowHeight(20);
        jScrollPane3.setViewportView(customersTable);
        if (customersTable.getColumnModel().getColumnCount() > 0) {
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        blackListedTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        blackListedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Amount Paid", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blackListedTable.setRowHeight(20);
        jScrollPane4.setViewportView(blackListedTable);
        if (blackListedTable.getColumnModel().getColumnCount() > 0) {
            blackListedTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        showAllCustomersButton.setText("All Customers");
        showAllCustomersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCustomersButtonActionPerformed(evt);
            }
        });

        customerBlacklist.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customerBlacklist.setText("Blacklist");
        customerBlacklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerBlacklistActionPerformed(evt);
            }
        });

        customerDelete.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customerDelete.setText("Delete");
        customerDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDeleteActionPerformed(evt);
            }
        });

        blacklistedRestore.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedRestore.setText("Restore");
        blacklistedRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedRestoreActionPerformed(evt);
            }
        });

        blacklistedDelete.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedDelete.setText("Delete");
        blacklistedDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customersPanelLayout = new javax.swing.GroupLayout(customersPanel);
        customersPanel.setLayout(customersPanelLayout);
        customersPanelLayout.setHorizontalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(customersPanelLayout.createSequentialGroup()
                                            .addComponent(customersSaveChangesButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(customerBlacklist)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(customerDelete))
                                        .addGroup(customersPanelLayout.createSequentialGroup()
                                            .addComponent(blacklistedSaveChangsButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(blacklistedRestore)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(blacklistedDelete)))
                                    .addGroup(customersPanelLayout.createSequentialGroup()
                                        .addComponent(customersPageTitle)
                                        .addGap(66, 66, 66)
                                        .addComponent(customerSearchName)
                                        .addGap(18, 18, 18)
                                        .addComponent(customerSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))))
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(showAllCustomersButton)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        customersPanelLayout.setVerticalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersPageTitle)
                    .addComponent(customerSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAllCustomersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customersSaveChangesButton)
                    .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerBlacklist)
                        .addComponent(customerDelete)))
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blacklistedSaveChangsButton)
                    .addComponent(blacklistedRestore)
                    .addComponent(blacklistedDelete))
                .addContainerGap(612, Short.MAX_VALUE))
        );

        jPanel1.add(customersPanel);
        customersPanel.setBounds(130, 120, 1082, 1261);

        stockPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        stockPageTitle.setText("Stock");

        stockSearchName.setText("Search by name...");
        stockSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockSearchNameActionPerformed(evt);
            }
        });

        addStockButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockButton.setText("Add Stock");
        addStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockButtonActionPerformed(evt);
            }
        });

        stockSaveChangesButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        stockSaveChangesButton.setText("Save");
        stockSaveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockSaveChangesButtonActionPerformed(evt);
            }
        });

        stockTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Category", "Brand Name", "Price/Unit", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockTable.setRowHeight(20);
        jScrollPane5.setViewportView(stockTable);
        if (stockTable.getColumnModel().getColumnCount() > 0) {
            stockTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        showAllStockButton.setText("All Stock");
        showAllStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllStockButtonActionPerformed(evt);
            }
        });

        stockDeleteButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        stockDeleteButton.setText("Delete");
        stockDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockDeleteButtonActionPerformed(evt);
            }
        });

        stockSearchCategory.setText("Search by category...");
        stockSearchCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockSearchCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stockPanelLayout = new javax.swing.GroupLayout(stockPanel);
        stockPanel.setLayout(stockPanelLayout);
        stockPanelLayout.setHorizontalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showAllStockButton)
                    .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(stockPanelLayout.createSequentialGroup()
                            .addComponent(stockPageTitle)
                            .addGap(26, 26, 26)
                            .addComponent(stockSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(stockSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(114, 114, 114)
                            .addComponent(addStockButton))
                        .addComponent(jScrollPane5)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockPanelLayout.createSequentialGroup()
                            .addComponent(stockSaveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(stockDeleteButton))))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        stockPanelLayout.setVerticalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addStockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stockPageTitle)
                        .addComponent(stockSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stockSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showAllStockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockSaveChangesButton)
                    .addComponent(stockDeleteButton))
                .addContainerGap(167, Short.MAX_VALUE))
        );

        jPanel1.add(stockPanel);
        stockPanel.setBounds(130, 230, 1190, 726);

        ordersPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        ordersPageTitle.setText("Orders");

        ordersSearchName.setText("Search by name...");
        ordersSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchNameActionPerformed(evt);
            }
        });

        addOrderButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addOrderButton.setText("Add Order");
        addOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderButtonActionPerformed(evt);
            }
        });

        ordersTable.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Item", "Quantity", "Cost", "C/F/Debt", "M-Pesa", "Cash", "Balance", "Banked", "Slip No.", "Banked by"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ordersTable.setRowHeight(17);
        jScrollPane1.setViewportView(ordersTable);

        ordersSaveButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        ordersSaveButton.setText("Save");
        ordersSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSaveButtonActionPerformed(evt);
            }
        });

        showAllOrdersButton.setText("All Orders Today");
        showAllOrdersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllOrdersButtonActionPerformed(evt);
            }
        });

        ordersDeleteButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        ordersDeleteButton.setText("Delete");
        ordersDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersDeleteButtonActionPerformed(evt);
            }
        });

        ordersSearchDeliverer.setText("Search by deliverer...");
        ordersSearchDeliverer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchDelivererActionPerformed(evt);
            }
        });

        ordersSearchDate.setText("Search by date...(YYYY-MM-DD)");
        ordersSearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ordersPanelLayout = new javax.swing.GroupLayout(ordersPanel);
        ordersPanel.setLayout(ordersPanelLayout);
        ordersPanelLayout.setHorizontalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ordersPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(ordersPageTitle)
                        .addGap(29, 29, 29)
                        .addComponent(ordersSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ordersSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ordersSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(addOrderButton))
                    .addGroup(ordersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(showAllOrdersButton))
                    .addGroup(ordersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ordersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ordersSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ordersDeleteButton)
                        .addGap(11, 11, 11)))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        ordersPanelLayout.setVerticalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ordersPageTitle)
                        .addComponent(ordersSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ordersSearchDeliverer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ordersSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showAllOrdersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordersSaveButton)
                    .addComponent(ordersDeleteButton))
                .addGap(136, 136, 136))
        );

        jPanel1.add(ordersPanel);
        ordersPanel.setBounds(110, 350, 1190, 734);

        summaryPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        summaryPageTitle.setText("Summary");

        totalSalesTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalSalesTodayLabel.setText("Total Sales Today:");

        revenueRealizedTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        revenueRealizedTodayLabel.setText("Revenue Realized Today:");

        totalPaidViaMpesaTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalPaidViaMpesaTodayLabel.setText("Total Paid via M-Pesa Today:");

        totalPaidInCashTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalPaidInCashTodayLabel.setText("Total Paid in Cash Today:");

        totalDebtPaidInMpesaLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalDebtPaidInMpesaLabel.setText("Total Debt Paid in M-Pesa:");

        totalDebtPaidInCashLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalDebtPaidInCashLabel.setText("Total Debt Paid in Cash:");

        totalBankedTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        totalBankedTodayLabel.setText("Total Banked Today:");

        expensesTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        expensesTodayLabel.setText("Average Fixed Expenditure:");

        mpesaTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        salesTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        revenueTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        cashTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        bankedTodayLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        debtMpesaLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        debtCashLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        expensesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N

        refreshButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/refresher.png"))); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout summaryPanelLayout = new javax.swing.GroupLayout(summaryPanel);
        summaryPanel.setLayout(summaryPanelLayout);
        summaryPanelLayout.setHorizontalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(summaryPageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(summaryPanelLayout.createSequentialGroup()
                                    .addComponent(totalBankedTodayLabel)
                                    .addGap(29, 29, 29)
                                    .addComponent(bankedTodayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(summaryPanelLayout.createSequentialGroup()
                                    .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(summaryPanelLayout.createSequentialGroup()
                                            .addComponent(totalSalesTodayLabel)
                                            .addGap(40, 40, 40)
                                            .addComponent(salesTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(summaryPanelLayout.createSequentialGroup()
                                            .addComponent(expensesTodayLabel)
                                            .addGap(27, 27, 27)
                                            .addComponent(expensesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(summaryPanelLayout.createSequentialGroup()
                                            .addComponent(totalDebtPaidInCashLabel)
                                            .addGap(35, 35, 35)
                                            .addComponent(debtCashLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(summaryPanelLayout.createSequentialGroup()
                                            .addComponent(revenueRealizedTodayLabel)
                                            .addGap(41, 41, 41)
                                            .addComponent(revenueTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(summaryPanelLayout.createSequentialGroup()
                                            .addComponent(totalPaidViaMpesaTodayLabel)
                                            .addGap(46, 46, 46)
                                            .addComponent(mpesaTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(0, 34, Short.MAX_VALUE)))
                            .addGroup(summaryPanelLayout.createSequentialGroup()
                                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalPaidInCashTodayLabel)
                                    .addComponent(totalDebtPaidInMpesaLabel))
                                .addGap(40, 40, 40)
                                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cashTodayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(debtMpesaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(196, 196, 196)
                .addComponent(refreshButton)
                .addGap(181, 181, 181))
        );
        summaryPanelLayout.setVerticalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addComponent(summaryPageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalSalesTodayLabel)
                            .addComponent(salesTodayLabel))
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryPanelLayout.createSequentialGroup()
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(revenueRealizedTodayLabel)
                    .addComponent(revenueTodayLabel))
                .addGap(40, 40, 40)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalPaidViaMpesaTodayLabel)
                    .addComponent(mpesaTodayLabel))
                .addGap(49, 49, 49)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalPaidInCashTodayLabel)
                    .addComponent(cashTodayLabel))
                .addGap(46, 46, 46)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalDebtPaidInMpesaLabel)
                    .addComponent(debtMpesaLabel))
                .addGap(53, 53, 53)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalDebtPaidInCashLabel)
                    .addComponent(debtCashLabel))
                .addGap(48, 48, 48)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalBankedTodayLabel)
                    .addComponent(bankedTodayLabel))
                .addGap(44, 44, 44)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expensesTodayLabel)
                    .addComponent(expensesLabel))
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jPanel1.add(summaryPanel);
        summaryPanel.setBounds(110, 470, 1215, 730);

        addStockBackButton.setText("< Back");
        addStockBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockBackButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addStockBackButton);
        addStockBackButton.setBounds(250, 20, 0, 10);

        addCustomerBackButton.setText("< Back");
        addCustomerBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerBackButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addCustomerBackButton);
        addCustomerBackButton.setBounds(230, 20, 87, 0);

        addCustomerPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        addCustomerPageTitle.setText("Add Customer");

        addCustomerNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerNameLabel.setText("Customer Name:");

        addCustomerNumberLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerNumberLabel.setText("Mobile No. :");

        addCustomerDelivererLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerDelivererLabel.setText("Deliverer:");

        addCustomerLocationLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerLocationLabel.setText("Location:");

        addCustomerNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerNumberTextFieldActionPerformed(evt);
            }
        });

        addCustomerSaveButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerSaveButton.setText("Add");
        addCustomerSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerSaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addCustomerPanelLayout = new javax.swing.GroupLayout(addCustomerPanel);
        addCustomerPanel.setLayout(addCustomerPanelLayout);
        addCustomerPanelLayout.setHorizontalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCustomerPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(addCustomerPageTitle))
                    .addGroup(addCustomerPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addCustomerDelivererLabel)
                            .addComponent(addCustomerNameLabel)
                            .addComponent(addCustomerLocationLabel)
                            .addComponent(addCustomerNumberLabel))
                        .addGap(18, 18, 18)
                        .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCustomerDelivererTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCustomerLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCustomerNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addCustomerPanelLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(addCustomerSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        addCustomerPanelLayout.setVerticalGroup(
            addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCustomerPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(addCustomerPageTitle)
                .addGap(65, 65, 65)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerNameLabel)
                    .addComponent(addCustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerNumberLabel)
                    .addComponent(addCustomerNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerLocationLabel)
                    .addComponent(addCustomerLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96)
                .addGroup(addCustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerDelivererLabel)
                    .addComponent(addCustomerDelivererTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(addCustomerSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        jPanel1.add(addCustomerPanel);
        addCustomerPanel.setBounds(50, 220, 1190, 730);

        addStockPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        addStockPageTitle.setText("Add Stock");

        addStockNameLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockNameLabel.setText("Stock Name:");

        addStockQuantityLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockQuantityLabel.setText("Quantity:");

        addStockPriceLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockPriceLabel.setText("Price:");

        addStockPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockPriceTextFieldActionPerformed(evt);
            }
        });

        addStockNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockNameTextFieldActionPerformed(evt);
            }
        });

        addStockQuantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockQuantityTextFieldActionPerformed(evt);
            }
        });

        addStockSaveButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockSaveButton.setText("Add");
        addStockSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockSaveButtonActionPerformed(evt);
            }
        });

        addStockCategoryIdLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addStockCategoryIdLabel.setText("Category ID:");

        javax.swing.GroupLayout addStockPanelLayout = new javax.swing.GroupLayout(addStockPanel);
        addStockPanel.setLayout(addStockPanelLayout);
        addStockPanelLayout.setHorizontalGroup(
            addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStockPanelLayout.createSequentialGroup()
                .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addStockPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(addStockPageTitle))
                    .addGroup(addStockPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addStockQuantityLabel)
                            .addComponent(addStockPriceLabel)
                            .addComponent(addStockNameLabel)
                            .addComponent(addStockCategoryIdLabel))
                        .addGap(18, 18, 18)
                        .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addStockNameTextField)
                            .addComponent(addStockPriceTextField)
                            .addComponent(addStockCategoryIdTextField)
                            .addComponent(addStockQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addStockPanelLayout.createSequentialGroup()
                        .addGap(471, 471, 471)
                        .addComponent(addStockSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        addStockPanelLayout.setVerticalGroup(
            addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStockPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addStockPanelLayout.createSequentialGroup()
                        .addComponent(addStockPageTitle)
                        .addGap(92, 92, 92)
                        .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addStockCategoryIdLabel)
                            .addComponent(addStockCategoryIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addStockNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addStockNameLabel))
                        .addGap(72, 72, 72)
                        .addGroup(addStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addStockPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addStockPriceLabel))
                        .addGap(69, 69, 69)
                        .addComponent(addStockQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addStockQuantityLabel))
                .addGap(90, 90, 90)
                .addComponent(addStockSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        jPanel1.add(addStockPanel);
        addStockPanel.setBounds(40, 150, 1190, 788);

        customersPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/printer.png"))); // NOI18N
        customersPrintButton.setText("Print");
        customersPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersPrintButtonActionPerformed(evt);
            }
        });
        jPanel1.add(customersPrintButton);
        customersPrintButton.setBounds(250, 9, 65, 0);

        addCustomerButton1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerButton1.setText("Add Customer");
        addCustomerButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel4.setText("Blacklisted");

        customersPageTitle1.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        customersPageTitle1.setText("Customers");

        customerSearchDeliverer1.setText("Search by deliverer...");
        customerSearchDeliverer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchDeliverer1ActionPerformed(evt);
            }
        });

        customerSearchName1.setText("Search by name...");
        customerSearchName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchName1ActionPerformed(evt);
            }
        });

        customersTable1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        customersTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Deliverer", "Status"
            }
        ));
        customersTable1.setRowHeight(20);
        jScrollPane6.setViewportView(customersTable1);
        if (customersTable1.getColumnModel().getColumnCount() > 0) {
            customersTable1.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        customersSaveChangesButton1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customersSaveChangesButton1.setText("Save");
        customersSaveChangesButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersSaveChangesButton1ActionPerformed(evt);
            }
        });

        blackListedTable1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        blackListedTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Amount Paid", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blackListedTable1.setRowHeight(20);
        jScrollPane7.setViewportView(blackListedTable1);
        if (blackListedTable1.getColumnModel().getColumnCount() > 0) {
            blackListedTable1.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        showAllCustomersButton1.setText("All Customers");
        showAllCustomersButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCustomersButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customersPanel1Layout = new javax.swing.GroupLayout(customersPanel1);
        customersPanel1.setLayout(customersPanel1Layout);
        customersPanel1Layout.setHorizontalGroup(
            customersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showAllCustomersButton1)
                .addContainerGap(1050, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customersPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customersPanel1Layout.createSequentialGroup()
                .addGroup(customersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(customersPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(customersSaveChangesButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customersPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7))
                    .addGroup(customersPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6))
                    .addGroup(customersPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(customersPageTitle1)
                        .addGap(66, 66, 66)
                        .addComponent(customerSearchName1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(customerSearchDeliverer1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(addCustomerButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(90, 90, 90))
        );
        customersPanel1Layout.setVerticalGroup(
            customersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(customersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersPageTitle1)
                    .addComponent(customerSearchDeliverer1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSearchName1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCustomerButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(showAllCustomersButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customersSaveChangesButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jPanel1.add(customersPanel1);
        customersPanel1.setBounds(110, 50, 1190, 730);

        avatarIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/avatar.png"))); // NOI18N
        jPanel1.add(avatarIcon);
        avatarIcon.setBounds(960, 10, 50, 40);

        ordersSearchName1.setText("Search by name...");
        ordersSearchName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchName1ActionPerformed(evt);
            }
        });

        addOrderButton1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addOrderButton1.setText("Add Order");
        addOrderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderButton1ActionPerformed(evt);
            }
        });

        ordersTable1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        ordersTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Item", "Quantity", "Cost", "C/F/Debt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ordersTable1.setRowHeight(20);
        jScrollPane2.setViewportView(ordersTable1);

        ordersPageTitle1.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        ordersPageTitle1.setText("Orders");

        showAllOrdersButton1.setText("All Orders Today");
        showAllOrdersButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllOrdersButton1ActionPerformed(evt);
            }
        });

        ordersSearchDeliverer1.setText("Search by deliverer...");
        ordersSearchDeliverer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchDeliverer1ActionPerformed(evt);
            }
        });

        ordersSearchDate1.setText("Search by date...(YYYY-MM-DD)");
        ordersSearchDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersSearchDate1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ordersPanel1Layout = new javax.swing.GroupLayout(ordersPanel1);
        ordersPanel1.setLayout(ordersPanel1Layout);
        ordersPanel1Layout.setHorizontalGroup(
            ordersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(ordersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showAllOrdersButton1)
                    .addGroup(ordersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(ordersPanel1Layout.createSequentialGroup()
                            .addComponent(ordersPageTitle1)
                            .addGap(18, 18, 18)
                            .addComponent(ordersSearchName1)
                            .addGap(18, 18, 18)
                            .addComponent(ordersSearchDeliverer1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(ordersSearchDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(addOrderButton1))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        ordersPanel1Layout.setVerticalGroup(
            ordersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(ordersPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordersPageTitle1)
                    .addComponent(ordersSearchName1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ordersSearchDeliverer1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ordersSearchDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addOrderButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showAllOrdersButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );

        jPanel1.add(ordersPanel1);
        ordersPanel1.setBounds(220, 0, 1190, 741);

        addOrderPageTitle.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        addOrderPageTitle.setText("New Order");

        newOrderSearchName.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        newOrderSearchName.setText("Search Customer by name...");
        newOrderSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderSearchNameActionPerformed(evt);
            }
        });

        newOrderTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        newOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Deliverer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        newOrderTable.setRowHeight(20);
        jScrollPane8.setViewportView(newOrderTable);

        orderDetailsTitle.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        orderDetailsTitle.setText("Order Details");

        newOrderSearchStock.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        newOrderSearchStock.setText("Search Stock by Category...");
        newOrderSearchStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderSearchStockActionPerformed(evt);
            }
        });

        newOrderDetailsTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        newOrderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Item Name", "Unit Price", "Quantity Available", "Order Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        newOrderDetailsTable.setRowHeight(20);
        jScrollPane9.setViewportView(newOrderDetailsTable);

        addToCartButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        addToCartButton.setText("Add Item");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 22)); // NOI18N
        jLabel5.setText("Cart");

        newOrderCartTable.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        newOrderCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Item Name", "Unit Price", "Order Quantity", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        newOrderCartTable.setRowHeight(20);
        jScrollPane10.setViewportView(newOrderCartTable);

        completeOrderButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        completeOrderButton.setText("Complete Order");
        completeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeOrderButtonActionPerformed(evt);
            }
        });

        deleteCartItemButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        deleteCartItemButton.setText("Delete");
        deleteCartItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCartItemButtonActionPerformed(evt);
            }
        });

        orderTotalLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        orderTotalLabel.setText("Total:");

        totalReadText.setEditable(false);

        javax.swing.GroupLayout addOrderPanelLayout = new javax.swing.GroupLayout(addOrderPanel);
        addOrderPanel.setLayout(addOrderPanelLayout);
        addOrderPanelLayout.setHorizontalGroup(
            addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addOrderPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(addOrderPanelLayout.createSequentialGroup()
                        .addComponent(orderTotalLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalReadText, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteCartItemButton))
                    .addGroup(addOrderPanelLayout.createSequentialGroup()
                        .addComponent(completeOrderButton)
                        .addGap(412, 412, 412))
                    .addGroup(addOrderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addToCartButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addOrderPanelLayout.createSequentialGroup()
                        .addComponent(orderDetailsTitle)
                        .addGap(138, 138, 138)
                        .addComponent(newOrderSearchStock, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addOrderPanelLayout.createSequentialGroup()
                        .addComponent(addOrderPageTitle)
                        .addGap(144, 144, 144)
                        .addComponent(newOrderSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 987, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        addOrderPanelLayout.setVerticalGroup(
            addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addOrderPanelLayout.createSequentialGroup()
                .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addOrderPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(addOrderPageTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOrderPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newOrderSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addOrderPanelLayout.createSequentialGroup()
                        .addComponent(orderDetailsTitle)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOrderPanelLayout.createSequentialGroup()
                        .addComponent(newOrderSearchStock, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addToCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteCartItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOrderPanelLayout.createSequentialGroup()
                        .addGroup(addOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalReadText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)))
                .addGap(20, 20, 20)
                .addComponent(completeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(834, 834, 834))
        );

        jPanel1.add(addOrderPanel);
        addOrderPanel.setBounds(-40, 60, 1088, 1483);

        addOrderBackButton.setText("< Back");
        addOrderBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderBackButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addOrderBackButton);
        addOrderBackButton.setBounds(130, 0, 100, 0);

        stockPageTitle1.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        stockPageTitle1.setText("Stock");

        stockSearchName1.setText("Search by name...");
        stockSearchName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockSearchName1ActionPerformed(evt);
            }
        });

        stockTable1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        stockTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Category", "Brand Name", "Price/Unit", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockTable1.setRowHeight(20);
        jScrollPane11.setViewportView(stockTable1);
        if (stockTable1.getColumnModel().getColumnCount() > 0) {
            stockTable1.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        showAllStockButton1.setText("All Stock");
        showAllStockButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllStockButton1ActionPerformed(evt);
            }
        });

        stockSearchCategory1.setText("Search by category...");
        stockSearchCategory1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockSearchCategory1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stockPanel1Layout = new javax.swing.GroupLayout(stockPanel1);
        stockPanel1.setLayout(stockPanel1Layout);
        stockPanel1Layout.setHorizontalGroup(
            stockPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(stockPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showAllStockButton1)
                    .addGroup(stockPanel1Layout.createSequentialGroup()
                        .addComponent(stockPageTitle1)
                        .addGap(48, 48, 48)
                        .addComponent(stockSearchName1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(stockSearchCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        stockPanel1Layout.setVerticalGroup(
            stockPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(stockPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stockPageTitle1)
                    .addComponent(stockSearchName1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stockSearchCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showAllStockButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(stockPanel1);
        stockPanel1.setBounds(200, 10, 10, 30);

        ordersPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kwanza/tukule/management/system/printer.png"))); // NOI18N
        ordersPrintButton.setText("Print");
        ordersPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersPrintButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ordersPrintButton);
        ordersPrintButton.setBounds(120, 0, 65, 32);

        customersPageTitle2.setFont(new java.awt.Font("Lucida Grande", 1, 30)); // NOI18N
        customersPageTitle2.setText("Customers");

        customerSearchDeliverer2.setText("Search by deliverer...");
        customerSearchDeliverer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchDeliverer2ActionPerformed(evt);
            }
        });

        customerSearchName2.setText("Search by name...");
        customerSearchName2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchName2ActionPerformed(evt);
            }
        });

        addCustomerButton2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addCustomerButton2.setText("Add Customer");
        addCustomerButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButton2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel6.setText("Blacklisted");

        customersSaveChangesButton2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customersSaveChangesButton2.setText("Save");
        customersSaveChangesButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersSaveChangesButton2ActionPerformed(evt);
            }
        });

        blacklistedSaveChangsButton1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedSaveChangsButton1.setText("Save");
        blacklistedSaveChangsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedSaveChangsButton1ActionPerformed(evt);
            }
        });

        customersTable2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        customersTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Deliverer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable2.setRowHeight(20);
        jScrollPane12.setViewportView(customersTable2);
        if (customersTable2.getColumnModel().getColumnCount() > 0) {
            customersTable2.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        blackListedTable2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        blackListedTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "#", "Name", "Mobile No.", "Location", "Amount Paid", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blackListedTable2.setRowHeight(20);
        jScrollPane13.setViewportView(blackListedTable2);
        if (blackListedTable2.getColumnModel().getColumnCount() > 0) {
            blackListedTable2.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        showAllCustomersButton2.setText("All Customers");
        showAllCustomersButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCustomersButton2ActionPerformed(evt);
            }
        });

        customerBlacklist1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        customerBlacklist1.setText("Blacklist");
        customerBlacklist1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerBlacklist1ActionPerformed(evt);
            }
        });

        blacklistedRestore1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        blacklistedRestore1.setText("Restore");
        blacklistedRestore1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistedRestore1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customersPanel2Layout = new javax.swing.GroupLayout(customersPanel2);
        customersPanel2.setLayout(customersPanel2Layout);
        customersPanel2Layout.setHorizontalGroup(
            customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanel2Layout.createSequentialGroup()
                .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customersPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(customersPanel2Layout.createSequentialGroup()
                                            .addComponent(customersPageTitle2)
                                            .addGap(66, 66, 66)
                                            .addComponent(customerSearchName2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(customerSearchDeliverer2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(addCustomerButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(customersPanel2Layout.createSequentialGroup()
                                        .addComponent(customersSaveChangesButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(customerBlacklist1))
                                    .addGroup(customersPanel2Layout.createSequentialGroup()
                                        .addComponent(blacklistedSaveChangsButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(blacklistedRestore1))))
                            .addGroup(customersPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6))))
                    .addGroup(customersPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(showAllCustomersButton2)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        customersPanel2Layout.setVerticalGroup(
            customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersPageTitle2)
                    .addComponent(customerSearchDeliverer2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSearchName2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCustomerButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAllCustomersButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersSaveChangesButton2)
                    .addComponent(customerBlacklist1))
                .addGap(7, 7, 7)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customersPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blacklistedSaveChangsButton1)
                    .addComponent(blacklistedRestore1))
                .addContainerGap(609, Short.MAX_VALUE))
        );

        jPanel1.add(customersPanel2);
        customersPanel2.setBounds(130, 120, 1082, 1261);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1272, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuOpenMousePressed
        Thread th = new Thread(){
            @Override
        public void run(){
           try{
               for(int a=0;a<=5;a++){
                   Thread.sleep(50);
                   if(a==1){
                       sideBar.setBounds(0,80,40,720);
                       menuOpen.setSize(0,0);
                       menuClose.setBounds(20,80,180,80);
                       jLabel2.setSize(0,0);
                   }
                       if(a==2){
                           sideBar.setBounds(0,80,80,720);
                       }
                       if(a==3){
                           sideBar.setBounds(0,80,120,720);
                       }
                       if(a==4){
                           sideBar.setBounds(0,80,160,720);
                       }
                       if(a==5){
                           sideBar.setBounds(0,80,200,720);
                       }
               }
           }catch(Exception ex){
               System.out.println(ex);
           } 
        }
    };th.start();
    nullPanel.setBounds(210,60,1190,730);
     customersPanel.setSize(0,0);
     customersPanel1.setSize(0,0);
     customersPanel2.setSize(0,0);
     ordersPrintButton.setSize(0,0);
     ordersPanel1.setSize(0,0);
     summaryPanel.setSize(0,0);
     ordersPanel.setSize(0,0);
     stockPanel.setSize(0,0);
     customersPrintButton.setSize(0,0);
     addCustomerBackButton.setSize(0,0);
     addStockBackButton.setSize(0,0);
     addOrderBackButton.setSize(0,0);
     addCustomerPanel.setSize(0,0);
     addStockPanel.setSize(0,0);
     stockPanel1.setSize(0,0);
     addOrderPanel.setSize(0,0);
     customerSideBar.setForeground(Color.black);
     stockSideBar.setForeground(Color.black);
     orderSideBar.setForeground(Color.black);
     summarySideBar.setForeground(Color.black);
    }//GEN-LAST:event_menuOpenMousePressed

    private void menuCloseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCloseMousePressed
        Thread th = new Thread(){
            @Override
        public void run(){
           try{
               for(int a=0;a<=5;a++){
                   Thread.sleep(50);
                   if(a==1){
                       sideBar.setBounds(0,80,200,720);            
               
                   }
                       if(a==2){
                           sideBar.setBounds(0,80,160,720);
                       }
                       if(a==3){
                           sideBar.setBounds(0,80,120,720);
                       }
                       if(a==4){
                           sideBar.setBounds(0,80,80,720);
                       }
                       if(a==5){
                           sideBar.setBounds(0,80,0,720);
                           menuOpen.setBounds(10,90,190,60);
                           jLabel2.setBounds(40,108,60,30);
                       }
               }
           }catch(Exception ex){
               System.out.println(ex);
           } 
        }
    };th.start();
     nullPanel.setBounds(210,60,1190,730);
     customersPanel.setSize(0,0);
     customersPanel1.setSize(0,0);
     customersPanel2.setSize(0,0);
     ordersPrintButton.setSize(0,0);
     ordersPanel1.setSize(0,0);
     summaryPanel.setSize(0,0);
     ordersPanel.setSize(0,0);
     stockPanel.setSize(0,0);
     customersPrintButton.setSize(0,0);
     addCustomerBackButton.setSize(0,0);
     addStockBackButton.setSize(0,0);
     addOrderBackButton.setSize(0,0);
     stockPanel1.setSize(0,0);
     addCustomerPanel.setSize(0,0);
     addStockPanel.setSize(0,0);
     addOrderPanel.setSize(0,0);
     customerSideBar.setForeground(Color.black);
     stockSideBar.setForeground(Color.black);
     orderSideBar.setForeground(Color.black);
     summarySideBar.setForeground(Color.black);
    }//GEN-LAST:event_menuCloseMousePressed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
            Login lg = new Login();
            this.setVisible(false);
            lg.setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void customerSideBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerSideBarMousePressed
        userAccess();
        customersQuery();
        customersQuery1();
        customersQuery2();
        blacklistQuery();
        blacklistQuery1();
        blacklistQuery2();
    }//GEN-LAST:event_customerSideBarMousePressed

    private void stockSideBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockSideBarMousePressed
       stockQuery1();
       stockAccess();
       stockQuery();
    }//GEN-LAST:event_stockSideBarMousePressed

    private void orderSideBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderSideBarMousePressed

            ordersAccess();
            ordersQuery();
            ordersQuery1();
    }//GEN-LAST:event_orderSideBarMousePressed
    
    private void summarySideBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_summarySideBarMousePressed
      summaryAccess();
    }//GEN-LAST:event_summarySideBarMousePressed

    private void customerSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchNameActionPerformed
                   String searched = customerSearchName.getText();
            String query2 = "select * from customers where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchNameActionPerformed

    private void stockSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockSearchNameActionPerformed
        String searched = stockSearchName.getText();
        String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_stockSearchNameActionPerformed

    private void ordersSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchNameActionPerformed
       String searched = ordersSearchName.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where customers.Name LIKE '"+searched+"%' AND DATE(orders.Created_at) = CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                rs.getString("Debt"),
                                rs.getString("Mpesa"),
                                rs.getString("Cash"),
                                rs.getString("Balance"),
                                rs.getString("Banked"),
                                rs.getString("Slip_Number"),
                                rs.getString("Banked_By")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersSearchNameActionPerformed

    private void addStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockButtonActionPerformed
        addStockPanel.setBounds(210,60,1190,730);
        customersPrintButton.setSize(0,0);
        addStockBackButton.setBounds(250,20,97,29);
        ordersPrintButton.setSize(0,0);
        summaryPanel.setSize(0,0);
        addCustomerPanel.setSize(0,0);
        addCustomerBackButton.setSize(0,0);
        customersPanel1.setSize(0,0);
        customersPanel2.setSize(0,0);
        ordersPanel1.setSize(0,0);
        stockPanel1.setSize(0,0);
        ordersPanel.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        stockPanel.setSize(0,0);
        addOrderPanel.setSize(0,0);
        nullPanel.setSize(0,0);
        customersPanel.setSize(0,0);
    }//GEN-LAST:event_addStockButtonActionPerformed

    private void addOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderButtonActionPerformed
        addOrderPanel.setBounds(210,60,1190,730);
        addOrderBackButton.setBounds(250,20,97,29);
         customersPrintButton.setSize(0,0);
         addStockBackButton.setSize(0,0);
         addCustomerBackButton.setSize(0,0);
         ordersPrintButton.setSize(0,0);
         addCustomerPanel.setSize(0,0);
         addStockPanel.setSize(0,0);
         ordersPanel.setSize(0,0);
         customersPanel2.setSize(0,0);
         summaryPanel.setSize(0,0);
         customersPanel.setSize(0,0);
         stockPanel1.setSize(0,0);
         customersPanel1.setSize(0,0);
         ordersPanel1.setSize(0,0);
         stockPanel.setSize(0,0);
         nullPanel.setSize(0,0);
         orderSideBar.setForeground(Color.white);
         summarySideBar.setForeground(Color.black);
         stockSideBar.setForeground(Color.black);
         customerSideBar.setForeground(Color.black);
    }//GEN-LAST:event_addOrderButtonActionPerformed

    private void addCustomerBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerBackButtonActionPerformed
        userAccess();
    }//GEN-LAST:event_addCustomerBackButtonActionPerformed

    private void addStockBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockBackButtonActionPerformed
        stockPanel.setBounds(210,60,1190,730);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        addStockBackButton.setSize(0,0);
        addCustomerBackButton.setSize(0,0);
        addCustomerPanel.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        customersPanel2.setSize(0,0);
        customersPanel1.setSize(0,0);
        stockPanel1.setSize(0,0);
        addOrderPanel.setSize(0,0);
        ordersPanel1.setSize(0,0);
        summaryPanel.setSize(0,0);
        ordersPanel.setSize(0,0);
        addStockPanel.setSize(0,0);
        nullPanel.setSize(0,0);
    }//GEN-LAST:event_addStockBackButtonActionPerformed

    private void addCustomerNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addCustomerNumberTextFieldActionPerformed

    private void customersPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersPrintButtonActionPerformed
        try{
            Boolean printData0 = customersTable.print();
            if (printData0){
                JOptionPane.showMessageDialog(null,"Done Printing");
            }
            else{
                JOptionPane.showMessageDialog(null,"Printing...");
            }
            } catch (PrinterException ex) {
                Logger.getLogger(Printer.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customersPrintButtonActionPerformed

    private void addCustomerButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButton1ActionPerformed
        addCustomerPanel.setBounds(210,60,1190,730);
        addCustomerBackButton.setBounds(250,20,97,29);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        summaryPanel.setSize(0,0);
        addStockBackButton.setSize(0,0);
        customersPanel2.setSize(0,0);
        customersPanel1.setSize(0,0);
        ordersPanel1.setSize(0,0);
        stockPanel1.setSize(0,0);
        addOrderPanel.setSize(0,0);
        addStockPanel.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        ordersPanel.setSize(0,0);
        stockPanel.setSize(0,0);
        nullPanel.setSize(0,0);
        customersPanel.setSize(0,0);
    }//GEN-LAST:event_addCustomerButton1ActionPerformed

    private void customerSearchName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchName1ActionPerformed
        String searched = customerSearchName1.getText();
            String query2 = "select * from customers where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchName1ActionPerformed

    private void addOrderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderButton1ActionPerformed
        addOrderPanel.setBounds(210,60,1190,730);
        addOrderBackButton.setBounds(250,20,97,29);
         customersPrintButton.setSize(0,0);
         addStockBackButton.setSize(0,0);
         addCustomerBackButton.setSize(0,0);
         ordersPrintButton.setSize(0,0);
         addCustomerPanel.setSize(0,0);
         customersPanel2.setSize(0,0);
         addStockPanel.setSize(0,0);
         summaryPanel.setSize(0,0);
         customersPanel.setSize(0,0);
         customersPanel1.setSize(0,0);
         stockPanel1.setSize(0,0);
         ordersPanel1.setSize(0,0);
         ordersPanel.setSize(0,0);
         stockPanel.setSize(0,0);
         nullPanel.setSize(0,0);
         orderSideBar.setForeground(Color.white);
         summarySideBar.setForeground(Color.black);
         stockSideBar.setForeground(Color.black);
         customerSideBar.setForeground(Color.black);
    }//GEN-LAST:event_addOrderButton1ActionPerformed

    private void addCustomerSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerSaveButtonActionPerformed
        try{
            String query = "INSERT INTO `customers`(`Name`, `Number`, `Deliverer`, `Location`) VALUES (?,?,?,?)";
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(query);
            pst.setString(1,addCustomerNameTextField.getText());
            pst.setString(2,addCustomerNumberTextField.getText());
            pst.setString(3,addCustomerDelivererTextField.getText());
            pst.setString(4,addCustomerLocationTextField.getText());
            pst.executeUpdate();
            userAccess();
                JOptionPane.showMessageDialog(this, "Customer Added.","Success",JOptionPane.INFORMATION_MESSAGE,icon);       
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery();
        customersQuery1();
        customersQuery2();
    }//GEN-LAST:event_addCustomerSaveButtonActionPerformed

    private void customersSaveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersSaveChangesButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        int selectedRowIndex = customersTable.getSelectedRow();
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String name = model.getValueAt(selectedRowIndex, 1).toString();
        String number = model.getValueAt(selectedRowIndex, 2).toString();
        String location = model.getValueAt(selectedRowIndex, 3).toString();
        String deliverer = model.getValueAt(selectedRowIndex, 4).toString();
        String sql = "update customers set Name = '"+name+"', Number='"+number+"',Location='"+location+"',Deliverer='"+deliverer+"' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery();
    }//GEN-LAST:event_customersSaveChangesButtonActionPerformed

    private void addStockSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockSaveButtonActionPerformed
        try{
        String query = "INSERT INTO `stock`(`Category_id`,`Name`, `Price`, `Quantity`) VALUES (?,?,?,?)";
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(query);
            pst.setString(1,addStockCategoryIdTextField.getText());
            pst.setString(2,addStockNameTextField.getText());
            pst.setString(3,addStockPriceTextField.getText());
            pst.setString(4,addStockQuantityTextField.getText());
            pst.executeUpdate();
            stockPanel.setBounds(210,60,1190,730);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        addStockBackButton.setSize(0,0);
        addCustomerBackButton.setSize(0,0);
        addCustomerPanel.setSize(0,0);
        customersPanel2.setSize(0,0);
        customersPanel1.setSize(0,0);
        ordersPanel1.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        summaryPanel.setSize(0,0);
        addOrderPanel.setSize(0,0);
        ordersPanel.setSize(0,0);
        addStockPanel.setSize(0,0);
        nullPanel.setSize(0,0);
                JOptionPane.showMessageDialog(this, "Stock Added.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        stockQuery();
    }//GEN-LAST:event_addStockSaveButtonActionPerformed

    private void stockSaveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockSaveChangesButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)stockTable.getModel();
        int selectedRowIndex = stockTable.getSelectedRow();
        int row = stockTable.getSelectedRow();
        String cell = stockTable.getModel().getValueAt(row, 0).toString();
        String category_id = model.getValueAt(selectedRowIndex, 1).toString();
        String name = model.getValueAt(selectedRowIndex, 2).toString();
        String price = model.getValueAt(selectedRowIndex, 3).toString();
        String quantity = model.getValueAt(selectedRowIndex, 4).toString();
        String sql = "update stock set  Price='"+price+"',Quantity='"+quantity+"' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Stock Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        stockQuery();
    }//GEN-LAST:event_stockSaveChangesButtonActionPerformed

    private void customerSearchDelivererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchDelivererActionPerformed
        String searched = customerSearchDeliverer.getText();
            String query2 = "select * from customers where Deliverer LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchDelivererActionPerformed

    private void showAllCustomersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllCustomersButtonActionPerformed
        customersQuery();
    }//GEN-LAST:event_showAllCustomersButtonActionPerformed

    private void showAllStockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllStockButtonActionPerformed
        stockQuery();
    }//GEN-LAST:event_showAllStockButtonActionPerformed

    private void customersSaveChangesButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersSaveChangesButton1ActionPerformed
         DefaultTableModel model = (DefaultTableModel)customersTable1.getModel();
        int selectedRowIndex = customersTable1.getSelectedRow();
        int row = customersTable1.getSelectedRow();
        String cell = customersTable1.getModel().getValueAt(row, 0).toString();
        String name = model.getValueAt(selectedRowIndex, 1).toString();
        String number = model.getValueAt(selectedRowIndex, 2).toString();
        String location = model.getValueAt(selectedRowIndex, 3).toString();
        String deliverer = model.getValueAt(selectedRowIndex, 4).toString();
        String sql = "update customers set Name = '"+name+"', Number='"+number+"',Location='"+location+"',Deliverer='"+deliverer+"' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery1();
    }//GEN-LAST:event_customersSaveChangesButton1ActionPerformed

    private void customerSearchDeliverer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchDeliverer1ActionPerformed
        String searched = customerSearchDeliverer1.getText();
            String query2 = "select * from customers where Deliverer LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchDeliverer1ActionPerformed

    private void showAllCustomersButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllCustomersButton1ActionPerformed
        customersQuery1();
    }//GEN-LAST:event_showAllCustomersButton1ActionPerformed

    private void showAllOrdersButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllOrdersButton1ActionPerformed
        ordersQuery1();
    }//GEN-LAST:event_showAllOrdersButton1ActionPerformed

    private void showAllOrdersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllOrdersButtonActionPerformed
        ordersQuery();
    }//GEN-LAST:event_showAllOrdersButtonActionPerformed

    private void blacklistedSaveChangsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedSaveChangsButtonActionPerformed
      DefaultTableModel model = (DefaultTableModel)blackListedTable.getModel();
        int selectedRowIndex = blackListedTable.getSelectedRow();
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        double paid = Double.parseDouble(model.getValueAt(selectedRowIndex, 4).toString());
        double balance = Double.parseDouble(model.getValueAt(selectedRowIndex, 5).toString());
        double new_balance = balance+paid;
        String sql = "update orders set Balance = '"+new_balance+"' where Customer_id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Balance Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        blacklistQuery();  
    }//GEN-LAST:event_blacklistedSaveChangsButtonActionPerformed

    private void customerBlacklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerBlacklistActionPerformed
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT EXISTS(SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.id='"+cell+"'  GROUP BY customers.id );";
        try{
        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
        pst = con.prepareStatement(sql2);
        rs=pst.executeQuery();
        int n = 0;
        if ( rs.next() ) {
            n = rs.getInt(1);
        }
        if ( n > 0 ) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Blacklist Selected Customer?","Blacklist",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
                String sql = "update customers set Status = 'blacklisted' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Blacklisted.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
            }
            else{
              customersQuery();
              blacklistQuery();
            } 
        }
        if(n == 0)
        {
           JOptionPane.showMessageDialog(this, "Selected Customer hasn't made any order.","Error",JOptionPane.INFORMATION_MESSAGE,icon);
           customersQuery();
           blacklistQuery();
        }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
          customersQuery();
          blacklistQuery(); 
    }//GEN-LAST:event_customerBlacklistActionPerformed

    private void customerDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerDeleteActionPerformed
        int row = customersTable.getSelectedRow();
        String cell = customersTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from customers where id =" + cell;
        try{   
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete Selected Customer?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Deleted.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery();
            }
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.ERROR_MESSAGE,icon);
        }
        customersQuery();
    }//GEN-LAST:event_customerDeleteActionPerformed

    private void stockDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockDeleteButtonActionPerformed
        int row = stockTable.getSelectedRow();
        String cell = stockTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from stock where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete Selected Stock?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon); 
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Stock Deleted.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              stockQuery();
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        stockQuery();
    }//GEN-LAST:event_stockDeleteButtonActionPerformed

    private void blacklistedDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedDeleteActionPerformed
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from customers where id =" + cell;
        try{   
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete Selected Customer?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            }
            else{
              blacklistQuery();
            }
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.ERROR_MESSAGE,icon);
        }
        blacklistQuery();
    }//GEN-LAST:event_blacklistedDeleteActionPerformed

    private void blacklistedRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedRestoreActionPerformed
        int row = blackListedTable.getSelectedRow();
        String cell = blackListedTable.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  and customers.id='"+cell+"' GROUP BY customers.id ); ";
        try{
        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
        pst = con.prepareStatement(sql2);
        rs=pst.executeQuery();
        while(rs.next()){
            double balance = rs.getDouble("orders.Balance");
            if(balance == 0){
              String sql = "update customers set Status = 'clean' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery();
              blacklistQuery();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            } 
            if(balance > 0){
               String sql = "update customers set Status = 'credit' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery();
              blacklistQuery();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            }
            if(balance < 0 && balance >= -100){
              String sql = "update customers set Status = 'fined' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery();
              blacklistQuery();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            }
            if(balance < -100){
               String sql = "update customers set Status = 'no delivery' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery();
              blacklistQuery();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }    
            }
        }
        
         } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        customersQuery();
        blacklistQuery();
    }//GEN-LAST:event_blacklistedRestoreActionPerformed

    private void stockSearchCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockSearchCategoryActionPerformed
        String searched = stockSearchCategory.getText();
        String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where Category_Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_stockSearchCategoryActionPerformed

    private void addStockPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockPriceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addStockPriceTextFieldActionPerformed

    private void addStockNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addStockNameTextFieldActionPerformed

    private void addStockQuantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockQuantityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addStockQuantityTextFieldActionPerformed

    private void ordersSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSaveButtonActionPerformed
        String new_status;
        int Customer_id;
        DefaultTableModel model = (DefaultTableModel)ordersTable.getModel();
        int selectedRowIndex = ordersTable.getSelectedRow();
        int row = ordersTable.getSelectedRow();
        String cell = ordersTable.getModel().getValueAt(row, 0).toString();
        double Mpesa = Double.parseDouble(model.getValueAt(selectedRowIndex, 7).toString());
        double Cash = Double.parseDouble(model.getValueAt(selectedRowIndex, 8).toString());
        double Balance = Double.parseDouble(model.getValueAt(selectedRowIndex,9).toString());
        String Banked = model.getValueAt(selectedRowIndex, 10).toString();
        String Slip = model.getValueAt(selectedRowIndex, 11).toString();
        String Banker = model.getValueAt(selectedRowIndex, 12).toString();
        double new_balance = (Mpesa+Cash)+Balance;
        String sql = "update orders set Mpesa='"+Mpesa+"', Cash='"+Cash+"',Balance='"+new_balance+"', Banked='"+Banked+"' , Slip_Number='"+Slip+"', Banked_By='"+Banker+"' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id where orders.id="+cell;
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                while(rs.next()){
                   Customer_id = rs.getInt("customers.id"); 
                   if(new_balance == 0){
            new_status="clean";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance > 0){
            new_status="credit";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance < 0 && new_balance >= -100){
            new_status="fined";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance < -100){
            new_status="no delivery";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
                }
                }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
            JOptionPane.showMessageDialog(this, "Order Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        ordersQuery();
    }//GEN-LAST:event_ordersSaveButtonActionPerformed

    private void ordersDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersDeleteButtonActionPerformed
        int row = ordersTable.getSelectedRow();
        String cell = ordersTable.getModel().getValueAt(row, 0).toString();
        String sql = "Delete from orders where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Delete selected Order?","Delete",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon); 
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Order Deleted.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              ordersQuery();
            }  
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        ordersQuery();
    }//GEN-LAST:event_ordersDeleteButtonActionPerformed

    private void addOrderBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderBackButtonActionPerformed
        ordersAccess();
    }//GEN-LAST:event_addOrderBackButtonActionPerformed

    private void newOrderSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderSearchNameActionPerformed
          String searched = newOrderSearchName.getText();
            String query2 = "select * from customers where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)newOrderTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_newOrderSearchNameActionPerformed

    private void newOrderSearchStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderSearchStockActionPerformed
        String searched = newOrderSearchStock.getText();
        String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where Category_Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)newOrderDetailsTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_newOrderSearchStockActionPerformed

    private void completeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeOrderButtonActionPerformed
        try{
        DefaultTableModel model = (DefaultTableModel)newOrderTable.getModel();
        int selectedRowIndex = (Integer)newOrderTable.getSelectedRow();
       int rows=(Integer)newOrderCartTable.getRowCount();
  for(int row = 0; row<rows; row++)
  {   
    String new_status;
    int Customer_id = Integer.parseInt(newOrderTable.getValueAt(selectedRowIndex, 0).toString());
    int Stock_id = Integer.parseInt(newOrderCartTable.getValueAt(row, 0).toString());
    int Quantity = Integer.parseInt(newOrderCartTable.getValueAt(row, 3).toString());
    Double Cost = Double.parseDouble(newOrderCartTable.getValueAt(row, 4).toString());
    String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where stock.id='"+Stock_id+"'";
    String query0 = "SELECT EXISTS(SELECT * FROM orders where Customer_id='"+Customer_id+"');";
    try{
        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
        pst = con.prepareStatement(query0);
        rs=pst.executeQuery();
        int n = 0;
        if ( rs.next() ) {
            n = rs.getInt(1);
        }
        if ( n > 0 ) {
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(query2);
            rs=pst.executeQuery();
            rs.next();
            int Category_id = rs.getInt("Category_id");
            int available = rs.getInt("Quantity");
            String query3 = "SELECT * FROM orders where Customer_id='"+Customer_id+"' ORDER BY Created_at DESC LIMIT  1";
            try{
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query3);
                rs=pst.executeQuery();
                rs.next();
                double old_Debt = rs.getDouble("Balance");
                double new_balance = old_Debt-Cost;
                String query = "Insert into orders(Customer_id,Category_id,Stock_id,Quantity,Debt,Mpesa,Cash,Balance) values ('"+Customer_id+"','"+Category_id+"','"+Stock_id+"','"+Quantity+"','"+old_Debt+"','0','0','"+new_balance+"')";
                try{
                    con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                    pst = con.prepareStatement(query);
                    pst.execute();
                    int new_quantity = available-Quantity;
                    String query4 = "update stock set Quantity='"+new_quantity+"'  where id =" + Stock_id;
                    try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query4);
                        pst.execute();
                        if(new_balance == 0){
            new_status="clean";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance > 0){
            new_status="credit";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance < 0 && new_balance >= -100){
            new_status="fined";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
               else if(new_balance < -100){
                new_status="no delivery";
                    String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
                   try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }catch (SQLException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(n == 0)
        {
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                    pst = con.prepareStatement(query2);
                    rs=pst.executeQuery();
                    rs.next();
                    int Category_id = rs.getInt("Category_id");
                    int available = rs.getInt("Quantity");
                    double new_Debt = 0-Cost;
                double new_balance = new_Debt;
            String query = "Insert into orders(Customer_id,Category_id,Stock_id,Quantity,Debt,Mpesa,Cash,Balance) values ('"+Customer_id+"','"+Category_id+"','"+Stock_id+"','"+Quantity+"','0','0','0','"+new_balance+"')";
                try{        
                    con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                    pst = con.prepareStatement(query);
                    pst.execute();
                    int new_quantity = available-Quantity;
                    String query4 = "update stock set Quantity='"+new_quantity+"'  where id =" + Stock_id;
                    try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query4);
                        pst.execute();
            if(new_balance == 0){
            new_status="clean";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance > 0){
            new_status="credit";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance < 0 && new_balance >= -100){
            new_status="fined";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
        else if(new_balance < -100){
            new_status="no delivery";
            String query5= "update customers set Status='"+new_status+"'  where id =" + Customer_id;
         try{
                        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                        pst = con.prepareStatement(query5);
                        pst.execute();
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
        }
                    }catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }catch (SQLException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
    }catch (SQLException ex) {
        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
    }       
  }
  ordersAccess();
  JOptionPane.showMessageDialog(this, "Order Complete.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
}
catch(Exception ex){
  JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
}    
        ordersQuery();
        ordersQuery1();
    }//GEN-LAST:event_completeOrderButtonActionPerformed

    private void deleteCartItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCartItemButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) newOrderCartTable.getModel();
        try{
            int SelectedRowIndex = newOrderCartTable.getSelectedRow();
            model.removeRow(SelectedRowIndex);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,"Select item to delete","Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        getTotals();
    }//GEN-LAST:event_deleteCartItemButtonActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        DefaultTableModel model2 = (DefaultTableModel)newOrderDetailsTable.getModel();
        int selectedRowIndex = newOrderDetailsTable.getSelectedRow();
        int row2 = newOrderDetailsTable.getSelectedRow();
        String cell = newOrderDetailsTable.getModel().getValueAt(row2, 0).toString();
        int quantity0 = Integer.parseInt(model2.getValueAt(selectedRowIndex, 3).toString());
        int quantity1 = Integer.parseInt(model2.getValueAt(selectedRowIndex, 4).toString());
        if(quantity0 >= quantity1)
        {
        TableModel model = newOrderDetailsTable.getModel();
        int[] index = newOrderDetailsTable.getSelectedRows();
        Object[] row = new Object[5];
        DefaultTableModel tm=(DefaultTableModel)newOrderCartTable.getModel();
        for(int i=0; i<index.length; i++)
        {
            row[0] = model.getValueAt(index[i],0);
            row[1] = model.getValueAt(index[i],1);
            row[2] = model.getValueAt(index[i],2);
            row[3] = model.getValueAt(index[i],4);
            double price = Double.parseDouble( model.getValueAt(index[i], 2).toString()) ;
            int quantity = Integer.parseInt( model.getValueAt(index[i], 4).toString()) ;
            double cost = price*quantity;
            row[4] = cost;
            tm.addRow(row);
        }
        getTotals();
        }
        else{
            JOptionPane.showMessageDialog(this,"The ordered quantity is more than what is available","Error",JOptionPane.INFORMATION_MESSAGE,icon);
        }
    }//GEN-LAST:event_addToCartButtonActionPerformed

    private void ordersSearchDelivererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchDelivererActionPerformed
        String searched = ordersSearchDeliverer.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where customers.Deliverer LIKE '"+searched+"%' AND DATE(orders.Created_at) = CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                rs.getString("Debt"),
                                rs.getString("Mpesa"),
                                rs.getString("Cash"),
                                rs.getString("Balance"),
                                rs.getString("Banked"),
                                rs.getString("Slip_Number"),
                                rs.getString("Banked_By")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersSearchDelivererActionPerformed

    private void ordersSearchDeliverer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchDeliverer1ActionPerformed
        String searched = ordersSearchDeliverer1.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where customers.Deliverer LIKE '"+searched+"%' AND DATE(orders.Created_at) = CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                rs.getString("Debt")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersSearchDeliverer1ActionPerformed

    private void ordersSearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchDateActionPerformed
        String searched = ordersSearchDate.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where orders.Created_at LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                rs.getString("Debt"),
                                rs.getString("Mpesa"),
                                rs.getString("Cash"),
                                rs.getString("Balance"),
                                rs.getString("Banked"),
                                rs.getString("Slip_Number"),
                                rs.getString("Banked_By")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersSearchDateActionPerformed

    private void ordersSearchDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchDate1ActionPerformed
        String searched = ordersSearchDate1.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where orders.Created_at LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                rs.getString("Debt")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersSearchDate1ActionPerformed

    private void stockSearchName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockSearchName1ActionPerformed
        String searched = stockSearchName1.getText();
        String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_stockSearchName1ActionPerformed

    private void showAllStockButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllStockButton1ActionPerformed
        stockQuery1();
    }//GEN-LAST:event_showAllStockButton1ActionPerformed

    private void stockSearchCategory1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockSearchCategory1ActionPerformed
        String searched = stockSearchCategory1.getText();
        String query2 = "select * from stock INNER JOIN category ON stock.Category_id=category.id where Category_Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_stockSearchCategory1ActionPerformed

    private void ordersSearchName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersSearchName1ActionPerformed
        String searched = ordersSearchName1.getText();
        double price;
        int quantity;
        double cost;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id where customers.Name LIKE '"+searched+"%' AND DATE(orders.Created_at) = CURRENT_DATE()";
        try {
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(query2);
            rs=pst.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)ordersTable1.getModel();
            tm.setRowCount(0);
            while(rs.next()){
                price=rs.getDouble("stock.price");
                quantity=rs.getInt("orders.Quantity");
                cost=price*quantity;
                Object o[]={rs.getInt("id"),
                    rs.getString("customers.Name"),
                    rs.getString("customers.Number"),
                    rs.getString("stock.Name"),
                    rs.getInt("orders.Quantity"),
                    cost,
                    rs.getString("Debt")
                };
                tm.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ordersSearchName1ActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        summaryQuery();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void ordersPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersPrintButtonActionPerformed
                 try{
            Boolean printData1 = ordersTable1.print();
            if (printData1){
                JOptionPane.showMessageDialog(null,"Done Printing");
            }
            else{
                JOptionPane.showMessageDialog(null,"Printing...");
            }
            } catch (PrinterException ex) {
                Logger.getLogger(Printer.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_ordersPrintButtonActionPerformed

    private void customerSearchDeliverer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchDeliverer2ActionPerformed
        String searched = customerSearchDeliverer2.getText();
            String query2 = "select * from customers where Deliverer LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable2.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchDeliverer2ActionPerformed

    private void customerSearchName2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchName2ActionPerformed
        String searched = customerSearchName2.getText();
            String query2 = "select * from customers where Name LIKE '"+searched+"%'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable2.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);               
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_customerSearchName2ActionPerformed

    private void addCustomerButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButton2ActionPerformed
        addCustomerPanel.setBounds(210,60,1190,730);
        addCustomerBackButton.setBounds(250,20,97,29);
        customersPrintButton.setSize(0,0);
        ordersPrintButton.setSize(0,0);
        summaryPanel.setSize(0,0);
        addStockBackButton.setSize(0,0);
        customersPanel1.setSize(0,0);
        ordersPanel1.setSize(0,0);
        stockPanel1.setSize(0,0);
        addOrderPanel.setSize(0,0);
        addStockPanel.setSize(0,0);
        addOrderBackButton.setSize(0,0);
        ordersPanel.setSize(0,0);
        stockPanel.setSize(0,0);
        nullPanel.setSize(0,0);
        customersPanel.setSize(0,0);
        customersPanel2.setSize(0,0);
    }//GEN-LAST:event_addCustomerButton2ActionPerformed

    private void customersSaveChangesButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersSaveChangesButton2ActionPerformed
        DefaultTableModel model = (DefaultTableModel)customersTable2.getModel();
        int selectedRowIndex = customersTable2.getSelectedRow();
        int row = customersTable2.getSelectedRow();
        String cell = customersTable2.getModel().getValueAt(row, 0).toString();
        String name = model.getValueAt(selectedRowIndex, 1).toString();
        String number = model.getValueAt(selectedRowIndex, 2).toString();
        String location = model.getValueAt(selectedRowIndex, 3).toString();
        String deliverer = model.getValueAt(selectedRowIndex, 4).toString();
        String sql = "update customers set Name = '"+name+"', Number='"+number+"',Location='"+location+"',Deliverer='"+deliverer+"' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        customersQuery2();
    }//GEN-LAST:event_customersSaveChangesButton2ActionPerformed

    private void blacklistedSaveChangsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedSaveChangsButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel)blackListedTable2.getModel();
        int selectedRowIndex = blackListedTable2.getSelectedRow();
        int row = blackListedTable2.getSelectedRow();
        String cell = blackListedTable2.getModel().getValueAt(row, 0).toString();
        double paid = Double.parseDouble(model.getValueAt(selectedRowIndex, 4).toString());
        double balance = Double.parseDouble(model.getValueAt(selectedRowIndex, 5).toString());
        double new_balance = balance+paid;
        String sql = "update orders set Balance = '"+new_balance+"' where Customer_id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Balance Updated.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
        blacklistQuery2();  
    }//GEN-LAST:event_blacklistedSaveChangsButton1ActionPerformed

    private void showAllCustomersButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllCustomersButton2ActionPerformed
        customersQuery2();
    }//GEN-LAST:event_showAllCustomersButton2ActionPerformed

    private void customerBlacklist1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerBlacklist1ActionPerformed
        int row = customersTable2.getSelectedRow();
        String cell = customersTable2.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT EXISTS(SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.id='"+cell+"'  GROUP BY customers.id );";
        try{
        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
        pst = con.prepareStatement(sql2);
        rs=pst.executeQuery();
        int n = 0;
        if ( rs.next() ) {
            n = rs.getInt(1);
        }
        if ( n > 0 ) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Blacklist Selected Customer?","Blacklist",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
                String sql = "update customers set Status = 'blacklisted' where id =" + cell;
        try{
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Blacklisted.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
            }
            else{
              customersQuery2();
              blacklistQuery2();
            } 
        }
        if(n == 0)
        {
           JOptionPane.showMessageDialog(this, "Selected Customer hasn't made any order.","Error",JOptionPane.INFORMATION_MESSAGE,icon);
           customersQuery2();
           blacklistQuery2();
        }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
        }
          customersQuery2();
          blacklistQuery2(); 
    }//GEN-LAST:event_customerBlacklist1ActionPerformed

    private void blacklistedRestore1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistedRestore1ActionPerformed
        int row = blackListedTable2.getSelectedRow();
        String cell = blackListedTable2.getModel().getValueAt(row, 0).toString();
        String sql2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  and customers.id='"+cell+"' GROUP BY customers.id ); ";
        try{
        con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
        pst = con.prepareStatement(sql2);
        rs=pst.executeQuery();
        while(rs.next()){
            double balance = rs.getDouble("orders.Balance");
            if(balance == 0){
              String sql = "update customers set Status = 'clean' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery2();
              blacklistQuery2();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            } 
            if(balance > 0){
               String sql = "update customers set Status = 'credit' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery2();
              blacklistQuery2();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            }
            if(balance < 0 && balance >= -100){
              String sql = "update customers set Status = 'fined' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery2();
              blacklistQuery2();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }  
            }
            if(balance < -100){
               String sql = "update customers set Status = 'no delivery' where id =" + cell;
        try{
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Restore Selected Customer?","Restore",dialogButton,JOptionPane.INFORMATION_MESSAGE,icon);
            if(dialogResult == JOptionPane.YES_OPTION){
            con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");    
            pst = con.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(this, "Customer Restored.","Success",JOptionPane.INFORMATION_MESSAGE,icon); 
            }
            else{
              customersQuery2();
              blacklistQuery2();
            }
            
            }catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex,"Oops!Something went wrong!",JOptionPane.INFORMATION_MESSAGE,icon);
            }    
            }
        }
        
         } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        customersQuery2();
        blacklistQuery2();
    }//GEN-LAST:event_blacklistedRestore1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerBackButton;
    private javax.swing.JButton addCustomerButton1;
    private javax.swing.JButton addCustomerButton2;
    private javax.swing.JLabel addCustomerDelivererLabel;
    private javax.swing.JTextField addCustomerDelivererTextField;
    private javax.swing.JLabel addCustomerLocationLabel;
    private javax.swing.JTextField addCustomerLocationTextField;
    private javax.swing.JLabel addCustomerNameLabel;
    private javax.swing.JTextField addCustomerNameTextField;
    private javax.swing.JLabel addCustomerNumberLabel;
    private javax.swing.JTextField addCustomerNumberTextField;
    private javax.swing.JLabel addCustomerPageTitle;
    private javax.swing.JPanel addCustomerPanel;
    private javax.swing.JButton addCustomerSaveButton;
    private javax.swing.JButton addOrderBackButton;
    private javax.swing.JButton addOrderButton;
    private javax.swing.JButton addOrderButton1;
    private javax.swing.JLabel addOrderPageTitle;
    private javax.swing.JPanel addOrderPanel;
    private javax.swing.JButton addStockBackButton;
    private javax.swing.JButton addStockButton;
    private javax.swing.JLabel addStockCategoryIdLabel;
    private javax.swing.JTextField addStockCategoryIdTextField;
    private javax.swing.JLabel addStockNameLabel;
    private javax.swing.JTextField addStockNameTextField;
    private javax.swing.JLabel addStockPageTitle;
    private javax.swing.JPanel addStockPanel;
    private javax.swing.JLabel addStockPriceLabel;
    private javax.swing.JTextField addStockPriceTextField;
    private javax.swing.JLabel addStockQuantityLabel;
    private javax.swing.JTextField addStockQuantityTextField;
    private javax.swing.JButton addStockSaveButton;
    private javax.swing.JButton addToCartButton;
    private javax.swing.JLabel avatarIcon;
    private javax.swing.JLabel bankedTodayLabel;
    private javax.swing.JTable blackListedTable;
    private javax.swing.JTable blackListedTable1;
    private javax.swing.JTable blackListedTable2;
    private javax.swing.JButton blacklistedDelete;
    private javax.swing.JButton blacklistedRestore;
    private javax.swing.JButton blacklistedRestore1;
    private javax.swing.JButton blacklistedSaveChangsButton;
    private javax.swing.JButton blacklistedSaveChangsButton1;
    private javax.swing.JLabel cashTodayLabel;
    private javax.swing.JButton completeOrderButton;
    private javax.swing.JButton customerBlacklist;
    private javax.swing.JButton customerBlacklist1;
    private javax.swing.JButton customerDelete;
    private javax.swing.JTextField customerSearchDeliverer;
    private javax.swing.JTextField customerSearchDeliverer1;
    private javax.swing.JTextField customerSearchDeliverer2;
    private javax.swing.JTextField customerSearchName;
    private javax.swing.JTextField customerSearchName1;
    private javax.swing.JTextField customerSearchName2;
    private javax.swing.JLabel customerSideBar;
    private javax.swing.JLabel customersPageTitle;
    private javax.swing.JLabel customersPageTitle1;
    private javax.swing.JLabel customersPageTitle2;
    private javax.swing.JPanel customersPanel;
    private javax.swing.JPanel customersPanel1;
    private javax.swing.JPanel customersPanel2;
    private javax.swing.JButton customersPrintButton;
    private javax.swing.JButton customersSaveChangesButton;
    private javax.swing.JButton customersSaveChangesButton1;
    private javax.swing.JButton customersSaveChangesButton2;
    private javax.swing.JTable customersTable;
    private javax.swing.JTable customersTable1;
    private javax.swing.JTable customersTable2;
    private javax.swing.JLabel debtCashLabel;
    private javax.swing.JLabel debtMpesaLabel;
    private javax.swing.JButton deleteCartItemButton;
    private javax.swing.JLabel expensesLabel;
    private javax.swing.JLabel expensesTodayLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel menuClose;
    private javax.swing.JLabel menuOpen;
    private javax.swing.JLabel mpesaTodayLabel;
    private javax.swing.JTable newOrderCartTable;
    private javax.swing.JTable newOrderDetailsTable;
    private javax.swing.JTextField newOrderSearchName;
    private javax.swing.JTextField newOrderSearchStock;
    private javax.swing.JTable newOrderTable;
    private javax.swing.JPanel nullPanel;
    private javax.swing.JLabel orderDetailsTitle;
    private javax.swing.JLabel orderSideBar;
    private javax.swing.JLabel orderTotalLabel;
    private javax.swing.JButton ordersDeleteButton;
    private javax.swing.JLabel ordersPageTitle;
    private javax.swing.JLabel ordersPageTitle1;
    private javax.swing.JPanel ordersPanel;
    private javax.swing.JPanel ordersPanel1;
    private javax.swing.JButton ordersPrintButton;
    private javax.swing.JButton ordersSaveButton;
    private javax.swing.JTextField ordersSearchDate;
    private javax.swing.JTextField ordersSearchDate1;
    private javax.swing.JTextField ordersSearchDeliverer;
    private javax.swing.JTextField ordersSearchDeliverer1;
    private javax.swing.JTextField ordersSearchName;
    private javax.swing.JTextField ordersSearchName1;
    private javax.swing.JTable ordersTable;
    private javax.swing.JTable ordersTable1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel revenueRealizedTodayLabel;
    private javax.swing.JLabel revenueTodayLabel;
    private javax.swing.JLabel salesTodayLabel;
    private javax.swing.JButton showAllCustomersButton;
    private javax.swing.JButton showAllCustomersButton1;
    private javax.swing.JButton showAllCustomersButton2;
    private javax.swing.JButton showAllOrdersButton;
    private javax.swing.JButton showAllOrdersButton1;
    private javax.swing.JButton showAllStockButton;
    private javax.swing.JButton showAllStockButton1;
    private javax.swing.JPanel sideBar;
    private javax.swing.JButton stockDeleteButton;
    private javax.swing.JLabel stockPageTitle;
    private javax.swing.JLabel stockPageTitle1;
    private javax.swing.JPanel stockPanel;
    private javax.swing.JPanel stockPanel1;
    private javax.swing.JButton stockSaveChangesButton;
    private javax.swing.JTextField stockSearchCategory;
    private javax.swing.JTextField stockSearchCategory1;
    private javax.swing.JTextField stockSearchName;
    private javax.swing.JTextField stockSearchName1;
    private javax.swing.JLabel stockSideBar;
    private javax.swing.JTable stockTable;
    private javax.swing.JTable stockTable1;
    private javax.swing.JLabel summaryPageTitle;
    private javax.swing.JPanel summaryPanel;
    private javax.swing.JLabel summarySideBar;
    private javax.swing.JLabel totalBankedTodayLabel;
    private javax.swing.JLabel totalDebtPaidInCashLabel;
    private javax.swing.JLabel totalDebtPaidInMpesaLabel;
    private javax.swing.JLabel totalPaidInCashTodayLabel;
    private javax.swing.JLabel totalPaidViaMpesaTodayLabel;
    private javax.swing.JTextField totalReadText;
    private javax.swing.JLabel totalSalesTodayLabel;
    private javax.swing.JLabel userLabel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("kwanza tukule icon.png")));
    }

    private void stockQuery() {
               String query2 = "SELECT * FROM stock INNER JOIN category ON stock.Category_id=category.id";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    private void stockQuery1() {
               String query2 = "SELECT * FROM stock INNER JOIN category ON stock.Category_id=category.id";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)stockTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Category_Name"),
                                rs.getString("Name"),
                                rs.getString("Price"),
                                rs.getString("Quantity")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void customersQuery() {
        String query2 = "select * from customers where Status='clean' or Status='fined' or Status='credit' or Status='no delivery'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void customersQuery1() {
        String query2 = "select * from customers where Status='clean' or Status='fined' or Status='credit' or Status='no delivery'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void userAccess() {
        String username;
        String query2 = "select * from users";
            try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                while (rs.next()) {
                   role = rs.getString("role");
                   username = rs.getString("username");
                   if( username.equals(user)  && role.equals("Software") ){
            customersPanel.setBounds(210,60,1190,730);
            customersPrintButton.setBounds(250,9,100,50);
            ordersPrintButton.setSize(0,0);
            addCustomerBackButton.setSize(0,0);
            addStockBackButton.setSize(0,0);
            addCustomerPanel.setSize(0,0);
            addStockPanel.setSize(0,0);
            addOrderBackButton.setSize(0,0);
            addOrderPanel.setSize(0,0);
              customersPanel1.setSize(0,0);
              customersPanel2.setSize(0,0);
               ordersPanel1.setSize(0,0);
             summaryPanel.setSize(0,0);
              ordersPanel.setSize(0,0);
             stockPanel.setSize(0,0);
             stockPanel1.setSize(0,0);
             nullPanel.setSize(0,0);
             customerSideBar.setForeground(Color.white);
                stockSideBar.setForeground(Color.black);
                orderSideBar.setForeground(Color.black);
                summarySideBar.setForeground(Color.black);
                }
                else if( username.equals(user)  && role.equals("CEO") ){
                customersPanel.setBounds(210,60,1190,730);
                customersPanel1.setSize(0,0);
                customersPanel2.setSize(0,0);
                customersPrintButton.setBounds(250,9,100,50);
                ordersPrintButton.setSize(0,0);
                addStockBackButton.setSize(0,0);
                addCustomerBackButton.setSize(0,0);
                addCustomerPanel.setSize(0,0);
                addStockPanel.setSize(0,0);
                summaryPanel.setSize(0,0);
                addOrderBackButton.setSize(0,0);
                addOrderPanel.setSize(0,0);
                stockPanel1.setSize(0,0);
                ordersPanel.setSize(0,0);
                stockPanel.setSize(0,0);
                nullPanel.setSize(0,0);
                customerSideBar.setForeground(Color.white);
                stockSideBar.setForeground(Color.black);
                orderSideBar.setForeground(Color.black);
                summarySideBar.setForeground(Color.black);
                }
                   else if( username.equals(user)  && role.equals("General operation manager") ){
                customersPanel2.setBounds(210,60,1190,730);
                customersPanel1.setSize(0,0);
                customersPanel.setSize(0,0);
                customersPrintButton.setBounds(250,9,100,50);
                ordersPrintButton.setSize(0,0);
                addStockBackButton.setSize(0,0);
                addCustomerBackButton.setSize(0,0);
                addCustomerPanel.setSize(0,0);
                summaryPanel.setSize(0,0);
                addOrderBackButton.setSize(0,0);
                addOrderPanel.setSize(0,0);
                addStockPanel.setSize(0,0);
                stockPanel1.setSize(0,0);
                ordersPanel.setSize(0,0);
                stockPanel.setSize(0,0);
                nullPanel.setSize(0,0);
                customerSideBar.setForeground(Color.white);
                stockSideBar.setForeground(Color.black);
                orderSideBar.setForeground(Color.black);
                summarySideBar.setForeground(Color.black);
                }

                   else if( username.equals(user)  && role.equals("admin") ){
                customersPanel1.setBounds(210,60,1190,730);
                customersPrintButton.setBounds(250,9,100,50);
                ordersPrintButton.setSize(0,0);
                customersPanel.setSize(0,0);
                customersPanel2.setSize(0,0);
                addStockBackButton.setSize(0,0);
                addCustomerBackButton.setSize(0,0);
                addOrderPanel.setSize(0,0);
                addCustomerPanel.setSize(0,0);
                summaryPanel.setSize(0,0);
                addOrderBackButton.setSize(0,0);
                addStockPanel.setSize(0,0);
                stockPanel1.setSize(0,0);
                ordersPanel.setSize(0,0);
                stockPanel.setSize(0,0);
                nullPanel.setSize(0,0);
                customerSideBar.setForeground(Color.white);
                stockSideBar.setForeground(Color.black);
                orderSideBar.setForeground(Color.black);
                summarySideBar.setForeground(Color.black);
                   }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void ordersAccess() {
        String username;
        String query = "select * from users";
            try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query);
                rs=pst.executeQuery();
                while (rs.next()) {
                   role = rs.getString("role");
                   username = rs.getString("username");
                   if( username.equals(user)  && role.equals("Software") ){
        ordersPanel.setBounds(210,60,1190,730);
      ordersPrintButton.setBounds(250,9,100,50);
      customersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addCustomerPanel.setSize(0,0);
      summaryPanel.setSize(0,0);
      addStockPanel.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      customersPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      addOrderPanel.setSize(0,0);
      stockPanel1.setSize(0,0);
      ordersPanel1.setSize(0,0);
      stockPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      orderSideBar.setForeground(Color.white);
      summarySideBar.setForeground(Color.black);
      stockSideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
      }    
           else if( username.equals(user)  && role.equals("CEO") ) 
               {
        ordersPanel.setBounds(210,60,1190,730);
         ordersPrintButton.setBounds(250,9,100,50);
         customersPrintButton.setSize(0,0);
         addStockBackButton.setSize(0,0);
         addCustomerBackButton.setSize(0,0);
         addCustomerPanel.setSize(0,0);
         addOrderPanel.setSize(0,0);
         addOrderBackButton.setSize(0,0);
         summaryPanel.setSize(0,0);
         addStockPanel.setSize(0,0);
         stockPanel1.setSize(0,0);
         customersPanel.setSize(0,0);
         customersPanel1.setSize(0,0);
         customersPanel2.setSize(0,0);
         ordersPanel1.setSize(0,0);
         stockPanel.setSize(0,0);
         nullPanel.setSize(0,0);
         orderSideBar.setForeground(Color.white);
         summarySideBar.setForeground(Color.black);
         stockSideBar.setForeground(Color.black);
         customerSideBar.setForeground(Color.black);
         }    
         else if( username.equals(user)  && role.equals("General operation manager") ) 
               {
        ordersPanel.setBounds(210,60,1190,730);
         ordersPrintButton.setBounds(250,9,100,50);
         customersPrintButton.setSize(0,0);
         addStockBackButton.setSize(0,0);
         addCustomerBackButton.setSize(0,0);
         addCustomerPanel.setSize(0,0);
         addOrderPanel.setSize(0,0);
         addOrderBackButton.setSize(0,0);
         summaryPanel.setSize(0,0);
         addStockPanel.setSize(0,0);
         customersPanel.setSize(0,0);
         customersPanel1.setSize(0,0);
         customersPanel2.setSize(0,0);
         stockPanel1.setSize(0,0);
         ordersPanel1.setSize(0,0);
         stockPanel.setSize(0,0);
         nullPanel.setSize(0,0);
         orderSideBar.setForeground(Color.white);
         summarySideBar.setForeground(Color.black);
         stockSideBar.setForeground(Color.black);
         customerSideBar.setForeground(Color.black);
         }  
          else if( username.equals(user)  && role.equals("admin") ){
         ordersPanel1.setBounds(210,60,1190,730);
         ordersPrintButton.setBounds(250,9,100,50);
         customersPrintButton.setSize(0,0);
         addStockBackButton.setSize(0,0);
         addCustomerBackButton.setSize(0,0);
         addCustomerPanel.setSize(0,0);
         addOrderPanel.setSize(0,0);
         summaryPanel.setSize(0,0);
         stockPanel1.setSize(0,0);
         addStockPanel.setSize(0,0);
         customersPanel.setSize(0,0);
         customersPanel1.setSize(0,0);
         customersPanel2.setSize(0,0);
         ordersPanel.setSize(0,0);
         stockPanel.setSize(0,0);
         addOrderBackButton.setSize(0,0);
         nullPanel.setSize(0,0);
         orderSideBar.setForeground(Color.white);
         summarySideBar.setForeground(Color.black);
         stockSideBar.setForeground(Color.black);
         customerSideBar.setForeground(Color.black);
                }
           }
            } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void ordersQuery(){
        double price;
        int quantity;
        double cost;
        double debt;
        double mpesa;
        double cash;
        double balance;
        double Debt;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id WHERE DATE(orders.Created_at) = CURRENT_DATE() order by orders.id ASC ;";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    debt=rs.getDouble("Debt");
                    mpesa=rs.getDouble("Mpesa");
                    cash=rs.getDouble("Cash");
                    balance=(mpesa+cash)+debt-cost;
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                debt,
                                mpesa,
                                cash,
                                balance,
                                rs.getString("Banked"),
                                rs.getString("Slip_Number"),
                                rs.getString("Banked_By")
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void ordersQuery1(){
        double price;
        int quantity;
        double cost;
        double debt;
        double Debt;
        String query2 = "select * from orders INNER JOIN customers ON orders.Customer_id=customers.id INNER JOIN stock ON orders.Stock_id=stock.id WHERE DATE(orders.Created_at) = CURRENT_DATE() order by orders.id ASC ;";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)ordersTable1.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    price=rs.getDouble("stock.price");
                    quantity=rs.getInt("orders.Quantity");
                    cost=price*quantity;
                    debt=rs.getDouble("Debt");
                    Object o[]={rs.getInt("id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("stock.Name"),
                                rs.getInt("orders.Quantity"),
                                cost,
                                debt      
                    };
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void getTotals(){
        double sum = 0;
            for(int i=0;i<newOrderCartTable.getRowCount(); i++ )
            {
                sum = sum + Double.parseDouble(newOrderCartTable.getValueAt(i,4).toString());
            }
            totalReadText.setText(Double.toString(sum));
    }

    private void blacklistQuery() {
         String query2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  GROUP BY customers.id );";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)blackListedTable.getModel();
                double paid = 0.0;
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("customers.id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("customers.Location"),
                                paid,
                                rs.getString("orders.Balance")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void blacklistQuery1() {
         String query2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  GROUP BY customers.id );";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)blackListedTable1.getModel();
                double paid = 0.0;
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("customers.id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("customers.Location"),
                                paid,
                                rs.getString("orders.Balance")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void summaryQuery() {
         String query0 = "SELECT SUM(MPesa) as 'Mpesa_today' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() ";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query0);
                rs=pst.executeQuery();
                while(rs.next())
                {
                    if(rs.getInt("Mpesa_today") > 0)
                    {
                    mpesaTodayLabel.setText("Ksh. "+rs.getString("Mpesa_today")+"");
                    }
                    else{ 
                    mpesaTodayLabel.setText("Ksh. 0.0 "); 
                    }
                }
                } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        String query1 = "SELECT SUM(Cash) as 'Cash_today' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() ";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query1);
                rs=pst.executeQuery();
                while(rs.next())
                {
                    if(rs.getInt("Cash_today") > 0)
                    {
                    cashTodayLabel.setText("Ksh. "+rs.getString("Cash_today")+"");
                    }
                    else{ 
                    cashTodayLabel.setText("Ksh. 0.0 "); 
                    }
                }
                } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
         String query2 = "select SUM(stock.Price*orders.Quantity) as 'Sales_today' from orders INNER JOIN stock ON orders.Stock_id=stock.id WHERE DATE(orders.Created_at) = CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                while(rs.next()){
                    if(rs.getInt("Sales_today") > 0)
                    {
                       salesTodayLabel.setText("Ksh. "+rs.getString("Sales_today")+""); 
                    }
                    else{ 
                    salesTodayLabel.setText("Ksh. 0.0 "); 
                    }
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        String query3 = "select (SUM(orders.Cash)+SUM(orders.MPesa)) as 'Revenue_today' from orders INNER JOIN stock ON orders.Stock_id=stock.id WHERE DATE(orders.Updated_at) = CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query3);
                rs=pst.executeQuery();
                while(rs.next()){
                    if(rs.getInt("Revenue_today") > 0)
                    {
                       revenueTodayLabel.setText("Ksh. "+rs.getString("Revenue_today")+""); 
                    }
                    else{ 
                    revenueTodayLabel.setText("Ksh. 0.0 "); 
                    }
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        String query4 = "SELECT SUM(MPesa) as 'Mpesa_debt' FROM `orders` WHERE DATE(Updated_at) = CURRENT_DATE() AND DATE(Created_at) < CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query4);
                rs=pst.executeQuery();
                while(rs.next()){
                    if(rs.getInt("Mpesa_debt") > 0)
                    {
                       debtMpesaLabel.setText("Ksh. "+rs.getString("Mpesa_debt")+"");  
                       }
                    else{ 
                    debtMpesaLabel.setText("Ksh. 0.0 "); 
                    }
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        String query5 = "SELECT SUM(Cash) as 'Cash_debt' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() AND DATE(Created_at) < CURRENT_DATE()";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query5);
                rs=pst.executeQuery();
                while(rs.next()){
                     if(rs.getInt("Cash_debt") > 0)
                    {
                       debtCashLabel.setText("Ksh. "+rs.getString("Cash_debt")+""); 
                       }
                    else{ 
                    debtCashLabel.setText("Ksh. 0.0 "); 
                    }
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
         String query6 = "SELECT SUM(Banked) as 'Banked_today' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() ";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query6);
                rs=pst.executeQuery();
                while(rs.next())
                {
                    if(rs.getInt("Banked_today") > 0)
                    {
                    bankedTodayLabel.setText("Ksh. "+rs.getString("Banked_today")+"");
                    }
                    else{ 
                    bankedTodayLabel.setText("Ksh. 0.0 "); 
                    }
                }
                } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        expensesLabel.setText("Ksh. 1242.0");     
        //String query8 = "SELECT SUM(Cash) as 'Cash_today' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() ";
        //try {
                //con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
               // pst = con.prepareStatement(query1);
                //rs=pst.executeQuery();
                //while(rs.next())
                //{
                   // double Cash = rs.getDouble("Cash_today");
                   // String query7 = "SELECT SUM(Banked) as 'Banked_today' FROM `orders` WHERE DATE(`Updated_at`) = CURRENT_DATE() ";
                   // try {
               // con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                //pst = con.prepareStatement(query7);
                //rs=pst.executeQuery();
                //while(rs.next())
                //{
                   //double Banked = rs.getDouble("Banked_today");
                  // double cash_hand = Cash - Banked - 1242.0;
                  // cashLabel.setText("Ksh." +cash_hand);
                //}
                //} catch (SQLException ex) {
                //Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            //}
               // }
               // } catch (SQLException ex) {
               // Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
   // }
    
}

    private void stockAccess() {
        String username;
        String query = "select * from users";
            try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query);
                rs=pst.executeQuery();
                while (rs.next()) {
                   role = rs.getString("role");
                   username = rs.getString("username");
                   if( username.equals(user)  && role.equals("Software") ){
        stockPanel.setBounds(210,60,1190,730);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addCustomerPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      stockPanel1.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      ordersPanel.setSize(0,0);
      summaryPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      stockSideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      summarySideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
      }    
           else if( username.equals(user)  && role.equals("CEO") ) 
               {
        stockPanel.setBounds(210,60,1190,730);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addCustomerPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      stockPanel1.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      ordersPanel.setSize(0,0);
      summaryPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      stockSideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      summarySideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
         }    
         else if( username.equals(user)  && role.equals("General operation manager") ) 
               {
        stockPanel.setBounds(210,60,1190,730);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addCustomerPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      addStockPanel.setSize(0,0);
      stockPanel1.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      ordersPanel.setSize(0,0);
      summaryPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      stockSideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      summarySideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
         }  
          else if( username.equals(user)  && role.equals("admin") ){
       stockPanel1.setBounds(210,60,1190,730);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addCustomerPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      ordersPanel1.setSize(0,0);
      stockPanel.setSize(0,0);
      customersPanel.setSize(0,0);
      customersPanel2.setSize(0,0);
      ordersPanel.setSize(0,0);
      summaryPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      stockSideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      summarySideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
                }
           }
            } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void summaryAccess() {
        String username;
        String query = "select * from users";
            try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query);
                rs=pst.executeQuery();
                while (rs.next()) {
                   role = rs.getString("role");
                   username = rs.getString("username");
                   if( username.equals(user)  && role.equals("Software") ){
        summaryPanel.setBounds(210,60,1190,730);
      addCustomerPanel.setSize(0,0);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      stockPanel1.setSize(0,0);
      ordersPanel.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      stockPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      summarySideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      stockSideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
      summaryQuery();
      }    
           else if( username.equals(user)  && role.equals("CEO") ) 
               {
        summaryPanel.setBounds(210,60,1190,730);
      addCustomerPanel.setSize(0,0);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      stockPanel1.setSize(0,0);
      ordersPanel.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      stockPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      summarySideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      stockSideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
      summaryQuery();
         }    
         else if( username.equals(user)  && role.equals("General operation manager") ) 
               {
        summaryPanel.setBounds(210,60,1190,730);
      addCustomerPanel.setSize(0,0);
      customersPrintButton.setSize(0,0);
      ordersPrintButton.setSize(0,0);
      addStockBackButton.setSize(0,0);
      addCustomerBackButton.setSize(0,0);
      addStockPanel.setSize(0,0);
      customersPanel1.setSize(0,0);
      customersPanel2.setSize(0,0);
      ordersPanel1.setSize(0,0);
      customersPanel.setSize(0,0);
      stockPanel1.setSize(0,0);
      ordersPanel.setSize(0,0);
      addOrderBackButton.setSize(0,0);
      stockPanel.setSize(0,0);
      addOrderPanel.setSize(0,0);
      nullPanel.setSize(0,0);
      summarySideBar.setForeground(Color.white);
      orderSideBar.setForeground(Color.black);
      stockSideBar.setForeground(Color.black);
      customerSideBar.setForeground(Color.black);
      summaryQuery();
         }  
          else if( username.equals(user)  && role.equals("admin") ){
      
       nullPanel.setBounds(210,60,1190,730);
     customersPanel.setSize(0,0);
     ordersPrintButton.setSize(0,0);
     customersPanel1.setSize(0,0);
     customersPanel2.setSize(0,0);
     ordersPanel1.setSize(0,0);
     summaryPanel.setSize(0,0);
     ordersPanel.setSize(0,0);
     stockPanel.setSize(0,0);
     customersPrintButton.setSize(0,0);
     addCustomerBackButton.setSize(0,0);
     addStockBackButton.setSize(0,0);
     addOrderBackButton.setSize(0,0);
     addCustomerPanel.setSize(0,0);
     addStockPanel.setSize(0,0);
     stockPanel1.setSize(0,0);
     addOrderPanel.setSize(0,0);
     customerSideBar.setForeground(Color.black);
     stockSideBar.setForeground(Color.black);
     orderSideBar.setForeground(Color.black);
     summarySideBar.setForeground(Color.black);
      JOptionPane.showMessageDialog(this,"Unauthorized Action","Access Denied",JOptionPane.INFORMATION_MESSAGE,icon);       
                }
           }
            } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void customersQuery2() {
        String query2 = "select * from customers where Status='clean' or Status='fined' or Status='credit' or Status='no delivery'";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)customersTable2.getModel();
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("id"),
                                rs.getString("Name"),
                                rs.getString("Number"),
                                rs.getString("Location"),
                                rs.getString("Deliverer"),
                                rs.getString("Status")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void blacklistQuery2() {
                 String query2 = "SELECT * FROM orders INNER JOIN customers ON orders.Customer_id=customers.id WHERE orders.Created_at IN (SELECT MAX(orders.Created_at) FROM orders INNER JOIN customers ON orders.Customer_id=customers.id where customers.Status='blacklisted'  GROUP BY customers.id );";
        try {
                con = DriverManager.getConnection("jdbc:mysql://41.190.141.49:3306/tukule_kwanza?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","tukule","tIlNEYbuBHuhE5hs");
                pst = con.prepareStatement(query2);
                rs=pst.executeQuery();
                DefaultTableModel tm=(DefaultTableModel)blackListedTable2.getModel();
                double paid = 0.0;
                tm.setRowCount(0);
                while(rs.next()){
                    Object o[]={rs.getInt("customers.id"),
                                rs.getString("customers.Name"),
                                rs.getString("customers.Number"),
                                rs.getString("customers.Location"),
                                paid,
                                rs.getString("orders.Balance")};
                    tm.addRow(o);         
                }
              } catch (SQLException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    }

